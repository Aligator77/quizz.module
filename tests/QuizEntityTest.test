<?php

use Drupal\quiz\Entity\QuizEntity;
use Drupal\quiz\Entity\QuizEntityType;

/**
 * Test aspects of quiz creation including global and user defaults.
 */
class QuizEntityTestCase extends QuizEntityTestCase {

  public static function getInfo() {
    return array(
        'name'        => t('Quiz entity'),
        'description' => t('Unit test for Quiz entity.'),
        'group'       => t('Quiz'),
    );
  }

  function setUp($modules = array(), $admin_permissions = array(), $user_permissions = array()) {
    $modules[] = 'quiz';
    parent::setUp($modules);
  }

  public function testInitQuizEntityType() {
    // Default quiz type.
    $types = entity_load('quiz_type', array('quiz'));
    $default_quiz_type = reset($types);
    $this->assertTrue($default_quiz_type instanceof QuizEntityType, 'Default quiz type is created.');

    $quiz_type = entity_create('quiz_type', array('type' => 'new_quiz'));
    $this->assertTrue($quiz_type instanceof QuizEntityType, 'Quiz type entity is created correctly using entity_create().');
    entity_save('quiz_type', $quiz_type);
  }

  public function testQuizEntity() {
    // ---------------------
    // Create entity
    // ---------------------
    $quiz = entity_create('quiz_entity', array('type' => 'quiz', 'pass_rate' => 95));
    $this->assertTrue($quiz instanceof QuizEntity, 'Quiz entity is created correctly using entity_create().');

    // ---------------------
    // Entity form, no warning
    // ---------------------
    $form = entity_form('quiz_entity', $quiz);
    foreach (array('title', 'vtabs', 'taking', 'summaryoptions', 'resultoptions', 'quiz_availability') as $k) {
      $this->assertTrue(isset($form[$k]), "Found {$k} in form.");
    }

    // ---------------------
    // Insert entity
    // ---------------------
    entity_save('quiz_entity', $quiz);
    $this->assertNotNull($quiz, 'Quiz entity is created successully.');

    // ---------------------
    // Update entity
    // ---------------------
    $quiz->title = 'Updated demo quiz';
    entity_save('quiz_entity', $quiz);

    // Reload entity
    $quiz = entity_load_single('quiz_entity', $quiz->identifier());
    $this->assertEqual('Updated demo quiz', $quiz->title, 'Quiz entity is updated.');

    // ---------------------
    // Test revision supporting
    // ---------------------
    $old_revision_id = $quiz->vid;

    // Save new revision
    $quiz->title .= ' [new revision]';
    $quiz->is_new_revision = true;
    $quiz->log = 'Trying revision supporting';
    entity_save('quiz_entity', $quiz);

    // Load old revision
    $quiz_1 = quiz_entity_single_load($quiz->qid, $old_revision_id);
    $quiz_2 = quiz_entity_single_load($quiz->qid);
    $this->assertNotEqual($quiz_1->log, $quiz_2->log, 'New revision is created correctly.');
    $this->assertEqual(95, $quiz_1->pass_rate, 'Quiz property is saved and loaded correctly.');

    // ---------------------
    // Delete quiz entity
    // ---------------------
    entity_delete('quiz_entity', $quiz->identifier());
    $null_quiz = entity_load_single('quiz_entity', $quiz->identifier());
    $this->assertFalse($null_quiz, 'Quiz entity is deleted');
  }

  /**
   * Test basic quiz creation.
   */
  public function testQuizCreation() {
    $this->drupalLogin($this->admin);
    $this->drupalGet("quiz/add");
    $this->drupalPost(NULL, array(
        'title'             => 'Test quiz creation',
        'remember_global'   => 0,
        'remember_settings' => 0), t('Save'));
    $this->drupalGet("quiz/1");
    $this->assertText('Test quiz creation');
    $this->assertText('Start quiz');
  }

}
