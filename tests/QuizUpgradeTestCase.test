<?php

abstract class QuizUpgradeBaseTestCase extends UpdatePathTestCase {

  protected static $testDumpFile = '…';
  protected static $dependencies = array('ctools', 'entity', 'filter', 'views', 'views_bulk_operations', 'xautoload');
  protected static $testDescription = 'Test an upgrade from various Quiz versions.';
  protected static $subModules = array('long_answer', 'matching', 'multichoice', 'quiz_ddlines', 'quiz_directions', 'quiz_page', 'quiz_question', 'quizz_scale', 'short_answer', 'truefalse');

  /**
   * Some warnings are produced by other modules, we cann't do anything, just
   * ignore them all.
   *
   * @var bool
   */
  private $ignoreErrors = TRUE;

  protected function error($message = '', $group = 'Other', array $caller = NULL) {
    if (FALSE === $this->ignoreErrors) {
      return parent::error($message, $group, $caller);
    }
    return $this->assertTrue(TRUE, "[$group] {$message}", 'Debug');
  }

  public function setUp() {
    $this->databaseDumpFiles = array(drupal_get_path('module', 'quizz') . '/tests/upgrade/' . static::$testDumpFile);
    module_enable(static::$dependencies);
    drupal_flush_all_caches();
    parent::setUp();

    // Module renamed from quiz to quizz
    db_update('system')
      ->fields(array(
          'name'     => 'quizz',
          'filename' => drupal_get_path('module', 'quizz'),
      ))
      ->condition('name', 'quiz')
      ->execute()
    ;

    module_enable(static::$dependencies);
    registry_rebuild();
    $this->loadedModules = module_list();
  }

  public function testUpgrade() {
    $info = $this->getPreupgradeInfo();
    $upgrade_1 = $this->doUpgradeOne();
    $upgrade_2 = $this->performUpgrade();
    $this->assertTrue($upgrade_1 && $upgrade_2, 'The update was completed successfully.');
    $this->checkSchemas();
    $this->checkConfiguration($info);
  }

  /**
   *
   */
  private function getPreupgradeInfo() {
    $info = array();

    $info['config'] = array('quiz' => '');

    return $info;
  }

  private function doUpgradeOne() {
    $scale = db_query('SELECT * FROM {system} WHERE name = :name AND type = :module', array(':name' => 'scale', ':module' => 'module'))->fetchObject();
    db_delete('system')->condition('type', 'module')->condition('name', 'scale')->execute();

    $upgrade_1 = $this->performUpgrade();

    db_update('system')
      ->fields(array('status' => 1, 'schema_version' => $scale->schema_version))
      ->condition('type', 'module')
      ->condition('name', 'quizz_scale')
      ->execute()
    ;

    registry_rebuild();
    drupal_flush_all_caches();

    return $upgrade_1;
  }

  /**
   * Make sure schemas are upgraded correctly.
   */
  private function checkSchemas() {
    foreach (static::$subModules as $module) {
      $this->assertTrue(module_exists($module), "Module {$module} is enabled.");
      if ($schema = module_invoke($module, 'schema')) {
        $this->checkSchema($schema);
      }
    }
  }

  private function checkSchema($schema) {
    foreach ($schema as $table_name => $table) {
      $this->assertTrue($table_exists = db_table_exists($table_name), "Table {$table_name} is available.");
      if (!$table_exists) {
        continue;
      }

      foreach (array_keys($table['fields']) as $field_name) {
        $this->assertTrue(db_field_exists($table_name, $field_name), "Field {$table_name}.{$field_name} is available.");
      }

      if (!empty($table['indexes'])) {
        foreach (array_keys($table['indexes']) as $index_name) {
          $this->assertTrue(db_index_exists($table_name, $index_name), "Found index {$table_name}.{$index_name}");
        }
      }
    }
  }

  /**
   * Make sure configuration are upgraded correctly.
   */
  private function checkConfiguration(array $stats) {
    // @TODO: Check configuration for quiz.
    // @TODO: Check body field is there for quiz content type.
    // @TODO: There's at least one quiz has body field not empty.
    // @TODO: Check configuration for question types.
    // @TODO: Check body field is there for question types.
    // @TODO: There's at least one quiz has body field not empty.
    // @TODO: Count number of quiz (published, unpublished, …).
    // @TODO: Count number of question for each question type, also check unpublished.
  }

}

class QuizUpgradeFrom7x4xTestCase extends QuizUpgradeBaseTestCase {

  protected static $testDumpFile = 'quiz-4x.php.gz';
  protected static $subModules = array('long_answer', 'matching', 'multichoice', 'quiz_ddlines', 'quiz_directions', 'quiz_question', 'quizz_scale', 'short_answer', 'truefalse');

  public static function getInfo() {
    return array(
        'name'        => 'Quiz upgrade from 7.x-4.x',
        'description' => static::$testDescription,
        'group'       => 'Quiz upgrade',
    );
  }

}

/**
 * Step to create the image: ./tests/upgrade/quiz-5x-generator.bash
 */
class QuizUpgradeFrom7x5xTestCase extends QuizUpgradeBaseTestCase {

  protected static $testDumpFile = 'quiz-5x.php.gz';

  public static function getInfo() {
    return array(
        'name'        => 'Quiz upgrade from 7.x-5.x',
        'description' => static::$testDescription,
        'group'       => 'Quiz upgrade',
    );
  }

}
