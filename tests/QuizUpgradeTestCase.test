<?php

abstract class QuizUpgradeBaseTestCase extends UpdatePathTestCase {

  protected static $testDumpFile = '…';
  protected static $dependencies = array('ctools', 'entity', 'filter', 'views', 'views_bulk_operations', 'xautoload');
  protected static $testDescription = 'Test an upgrade from various Quiz versions.';
  protected static $subModules = array('long_answer', 'matching', 'multichoice', 'quiz_ddlines', 'quiz_directions', 'quiz_page', 'quiz_question', 'quizz_scale', 'short_answer', 'truefalse');

  /**
   * Some warnings are produced by other modules, we cann't do anything, just
   * ignore them all.
   *
   * @var bool
   */
  private $ignoreErrors = TRUE;

  protected function error($message = '', $group = 'Other', array $caller = NULL) {
    if (FALSE === $this->ignoreErrors) {
      return parent::error($message, $group, $caller);
    }
    return $this->assertTrue(TRUE, "[$group] {$message}", 'Debug');
  }

  public function setUp() {
    $this->databaseDumpFiles = array(drupal_get_path('module', 'quizz') . '/tests/upgrade/' . static::$testDumpFile);
    module_enable(static::$dependencies);
    drupal_flush_all_caches();
    parent::setUp();

    // Module renamed from quiz to quizz
    db_update('system')
      ->fields(array(
          'name'     => 'quizz',
          'filename' => drupal_get_path('module', 'quizz'),
      ))
      ->condition('name', 'quiz')
      ->execute()
    ;

    module_enable(static::$dependencies);
    registry_rebuild();
    $this->loadedModules = module_list();
  }

  private function getPreupgradeInfo() {
    $info = array();

    // Store variables
    $variables = db_select('variable')
      ->fields('variable')
      ->where('name LIKE :pattern', array(':pattern' => 'quiz_%'))
      ->execute()
      ->fetchAllKeyed(0)
    ;
    foreach ($variables as $name => $value) {
      $info['config'][$name] = unserialize($value);
    }

    // Count
    $sql = 'SELECT COUNT(*) FROM {node} WHERE type = :type';
    $info['count'] = array(
        'quiz'         => db_query($sql, array(':type' => 'quiz'))->fetchColumn(),
        'long_answer'  => db_query($sql, array(':type' => 'long_answer'))->fetchColumn(),
        'matching'     => db_query($sql, array(':type' => 'matching'))->fetchColumn(),
        'quiz_page'    => db_query($sql, array(':type' => 'quiz_page'))->fetchColumn(),
        'scale'        => db_query($sql, array(':type' => 'scale'))->fetchColumn(),
        'short_answer' => db_query($sql, array(':type' => 'short_answer'))->fetchColumn(),
        'truefalse'    => db_query($sql, array(':type' => 'truefalse'))->fetchColumn(),
    );

    return $info;
  }

  public function testUpgrade() {
    $info = $this->getPreupgradeInfo();
    $upgrade_1 = $this->doUpgradeOne();
    $upgrade_2 = $this->performUpgrade();
    $this->assertTrue($upgrade_1 && $upgrade_2, 'The update was completed successfully.');
    $this->checkSchemas();
    $this->checkConfiguration($info);
    # $this->checkDataMigration($info);
  }

  private function doUpgradeOne() {
    $scale = db_query('SELECT * FROM {system} WHERE name = :name AND type = :module', array(':name' => 'scale', ':module' => 'module'))->fetchObject();
    db_delete('system')->condition('type', 'module')->condition('name', 'scale')->execute();

    $upgrade_1 = $this->performUpgrade();

    db_update('system')
      ->fields(array('status' => 1, 'schema_version' => $scale->schema_version))
      ->condition('type', 'module')
      ->condition('name', 'quizz_scale')
      ->execute()
    ;

    registry_rebuild();
    drupal_flush_all_caches();

    return $upgrade_1;
  }

  /**
   * Make sure schemas are upgraded correctly.
   */
  private function checkSchemas() {
    foreach (static::$subModules as $module) {
      $this->assertTrue(module_exists($module), "Module {$module} is enabled.");
      if ($schema = module_invoke($module, 'schema')) {
        $this->checkSchema($schema);
      }
    }
  }

  private function checkSchema($schema) {
    foreach ($schema as $table_name => $table) {
      $this->assertTrue($table_exists = db_table_exists($table_name), "Table {$table_name} is available.");
      if (!$table_exists) {
        continue;
      }

      foreach (array_keys($table['fields']) as $field_name) {
        $this->assertTrue(db_field_exists($table_name, $field_name), "Field {$table_name}.{$field_name} is available.");
      }

      if (!empty($table['indexes'])) {
        foreach (array_keys($table['indexes']) as $index_name) {
          $this->assertTrue(db_index_exists($table_name, $index_name), "Found index {$table_name}.{$index_name}");
        }
      }
    }
  }

  /**
   * Make sure configuration are upgraded correctly.
   */
  private function checkConfiguration(array $info) {
    // @TODO: Check configuration for quiz.
    $type = quiz_type_load('quiz');

    $vars = array();
    $vars[] = 'quiz_auto_revisioning';
    $vars[] = 'quiz_default_close';
    $vars[] = 'quiz_use_passfail';
    $vars[] = 'quiz_max_result_options';
    $vars[] = 'build_on_last';
    $vars[] = 'quiz_remove_partial_quiz_record';
    $vars[] = 'quiz_pager_start';
    $vars[] = 'quiz_pager_siblings';
    foreach ($vars as $var) {
      if (isset($info['config'][$var])) {
        $this->assertEqual($info['config'][$var], $type->getConfig($var), "{$var} is upgraded correctly.");
      }
    }

    // @TODO: Check body field is there for quiz content type.
    $this->assertTrue(NULL !== field_info_instance('quiz_entity', 'quiz_body', 'quiz'), 'Quiz bundle has body field.');
  }

  private function checkDataMigration($info) {
    // Count quiz and questions
    $c_quiz = db_query('SELECT COUNT(*) FROM {quiz_entity}')->fetchColumn();
    $sql = 'SELECT COUNT(*) FROM {quiz_question} WHERE type = :type';
    $c_la = db_query($sql, array(':type' => 'long_answer'))->fetchColumn();
    $c_match = db_query($sql, array(':type' => 'matching'))->fetchColumn();
    $c_page = db_query($sql, array(':type' => 'quiz_page'))->fetchColumn();
    $c_scale = db_query($sql, array(':type' => 'quizz_scale'))->fetchColumn();
    $c_short = db_query($sql, array(':type' => 'short_answer'))->fetchColumn();
    $c_truefalse = db_query($sql, array(':type' => 'truefalse'))->fetchColumn();

    $this->assertEqual($info['count']['quiz'], $c_quiz, "Number of quizzes is not changed.");
    $this->verbose($info['count']['long_answer'] . " == " . $c_la);
    $this->assertEqual($info['count']['long_answer'], $c_la, "Number of long answer questions is not changed.");
    $this->assertEqual($info['count']['match'], $c_match, "Number of match questions is not changed.");
    $this->assertEqual($info['count']['quiz_page'], $c_page, "Number of page questions is not changed.");
    $this->assertEqual($info['count']['scale'], $c_scale, "Number of scale questions is not changed.");
    $this->assertEqual($info['count']['short_answer'], $c_short, "Number of short-answer questions is not changed.");
    $this->assertEqual($info['count']['truefalse'], $c_truefalse, "Number of truefalse questions is not changed.");

    // @TODO: Check Quiz body field's data is migrated.
    // @TODO: Check configuration for question types.
    // @TODO: Check body field is there for question types.
    // @TODO: There's at least one quiz has body field not empty.
    // @TODO: Count number of quiz (published, unpublished, …).
    // @TODO: Count number of question for each question type, also check unpublished.
  }

}

class QuizUpgradeFrom7x4xTestCase extends QuizUpgradeBaseTestCase {

  protected static $testDumpFile = 'quiz-4x.php.gz';
  protected static $subModules = array('long_answer', 'matching', 'multichoice', 'quiz_ddlines', 'quiz_directions', 'quiz_question', 'quizz_scale', 'short_answer', 'truefalse');

  public static function getInfo() {
    return array(
        'name'        => 'Quiz upgrade from 7.x-4.x',
        'description' => static::$testDescription,
        'group'       => 'Quiz upgrade',
    );
  }

}

/**
 * Step to create the image: ./tests/upgrade/quiz-5x-generator.bash
 */
class QuizUpgradeFrom7x5xTestCase extends QuizUpgradeBaseTestCase {

  protected static $testDumpFile = 'quiz-5x.php.gz';

  public static function getInfo() {
    return array(
        'name'        => 'Quiz upgrade from 7.x-5.x',
        'description' => static::$testDescription,
        'group'       => 'Quiz upgrade',
    );
  }

}
