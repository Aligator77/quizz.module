<?php

/**
 * User pages.
 * @file
 */

/**
 * Jumper form.
 */
function quiz_jumper_form($form, $form_state, $questions, $current) {
  $form['#attached']['js'][] = drupal_get_path('module', 'quiz') . '/js/quiz.jumper.js';

  $form['question_number'] = array(
      '#type'          => 'select',
      '#options'       => $questions,
      '#default_value' => $current,
  );

  $form['submit'] = array(
      '#type'       => 'submit',
      '#value'      => t('Jump'),
      '#attributes' => array('class' => array('js-hide')),
      '#submit'     => array(function($form, &$form_state) {
            $quiz = quiz_entity_single_load(__quiz_get_context_id());
            quiz()
              ->getQuizHelper()
              ->getQuestionHelper()
              ->redirect($quiz, $form_state['values']['question_number'] - 1);
            $form_state['redirect'] = "quiz/" . $quiz->qid . "/take/" . $form_state['values']['question_number'];
      }),
  );
  return $form;
}

/**
 * Pass the correct mark to the theme so that theme authors can use an image.
 *
 * @ingroup themeable
 */
function theme_quiz_answer_result($variables) {
  $type = $variables['type'];
  return '<div class="quiz-score-icon ' . $type . '"></div>';
}

/**
 * Theme a progress indicator for use during a quiz.
 *
 * @param $question_number
 *  The position of the current question in the sessions' array.
 * @param $num_of_question
 *  The number of questions for the quiz.
 * @return
 *  Themed html.
 *
 * @ingroup themeable
 */
function theme_quiz_progress($variables) {
  $output = '';
  $output .= '<div id="quiz-progress">';
  $text = 'Page <span id="quiz-question-number">!x</span> of <span id="quiz-num-questions">@y</span>';
  if ($variables['allow_jumping']) {
    // Show jump form.
    if ($variables['pager']) {
      $output .= theme('quiz_pager', array(
          'quiz'     => $variables['quiz'],
          'siblings' => variable_get('quiz_pager_siblings', 5),
          'current'  => $variables['current'],
          'total'    => count($variables['questions']),
      ));
    }
    else {
      $selectbox = drupal_get_form('quiz_jumper_form', $variables['questions'], $variables['current']);
      $output = t($text, array('!x' => drupal_render($selectbox), '@y' => count($variables['questions'])));
    }
  }
  else {
    // Just text.
    $output .= t($text, array('!x' => $variables['current'], '@y' => count($variables['questions'])));
  }

  $output .= '</div>' . "\n";
  // Add div to be used by jQuery countdown
  if ($variables['time_limit']) {
    $output .= '<div class="countdown"></div>';
  }
  return $output;
}

/**
 * Theme the "no feedback" option.
 *
 * @return
 *  Themed html feedback.
 *
 * @ingroup themeable
 */
function theme_quiz_no_feedback() {
  return t('Thanks for taking the quiz!');
}

/**
 * Theme the stats on the views page
 */
function theme_quiz_view_stats($variables) {
  $quiz = $variables['quiz'];

  // Fetch data
  $stats[] = array('title' => t('Questions'), 'data' => isset($quiz->number_of_questions) ? $quiz->number_of_questions : 0);

  if ($quiz->show_attempt_stats) {
    $takes = $quiz->takes == 0 ? t('Unlimited') : $quiz->takes;
    $stats[] = array('title' => t('Attempts allowed'), 'data' => $takes);
  }

  if ($quiz->quiz_always) {
    $stats[] = array('title' => t('Available'), 'data' => t('Always'));
  }
  else {
    $stats[] = array('title' => t('Opens'), 'data' => format_date($quiz->quiz_open, 'short'));
    $stats[] = array('title' => t('Closes'), 'data' => format_date($quiz->quiz_close, 'short'));
  }

  if (!empty($quiz->pass_rate)) {
    $stats[] = array('title' => t('Pass rate'), 'data' => $quiz->pass_rate . ' %');
  }

  if (!empty($quiz->time_limit)) {
    $stats[] = array('title' => t('Time limit'), 'data' => quiz()->formatDuration($quiz->time_limit));
  }

  $stats[] = array('title' => t('Backwards navigation'), 'data' => $quiz->backwards_navigation ? t('Allowed') : t('Forbidden'));

  // Format and output the data
  $table = '';
  foreach ($stats as $stat) {
    $table .= '<tr>'
      . '<td class="quiz-view-table-title"><strong>' . $stat['title'] . ':</strong></td>'
      . '<td class="quiz-view-table-data"><em>' . $stat['data'] . '</em></td>'
      . '</tr>';
  }
  return '<table id="quiz-view-table">' . $table . '</table>';
}

/**
 * Theme the result page.
 *
 * @param $quiz
 *  The quiz entity object.
 * @param $questions
 *  The questions array as defined by _quiz_get_answers.
 * @param $score
 *  Array of score information as returned by quiz_calculate_score().
 * @param $summary
 *  Filtered text of the summary.
 * @return
 *  Themed html.
 *
 * @ingroup themeable
 */
function theme_quiz_result($variables) {
  global $user;

  $questions = $variables['questions'];
  $score = $variables['score'];
  $summary = $variables['summary'];
  $result = quiz_result_load($variables['result_id']);
  $account = $variables['account'];

  if (!$score['is_evaluated']) {
    $msg = t('Parts of this @quiz have not been evaluated yet. The score below is not final.', array('@quiz' => QUIZ_NAME));
    drupal_set_message($msg, 'warning');
  }

  // Display overall result.
  $params = array(
      '%num_correct'    => $score['numeric_score'],
      '%question_count' => $score['possible_score'],
      '!username'       => ($user->uid == $account->uid) ? t('You') : theme('username', array('account' => $account)),
      '@score'          => $score['percentage_score'],
      '!yourtotal'      => ($user->uid == $account->uid) ? t('Your') : t('Total'),
  );

  $output = '';
  if (quiz()->getQuizHelper()->getFeedbackHelper()->canReview('score', $result)) {
    // Show score.
    $output .= '<div id="quiz_score_possible">' . t('!username got %num_correct of %question_count possible points.', $params) . '</div>' . "\n";
    $output .= '<div id="quiz_score_percent">' . t('!yourtotal score: @score%', $params) . '</div>' . "\n";
  }

  if (quiz()->getQuizHelper()->getFeedbackHelper()->canReview('quiz_feedback', $result)) {
    // Show quiz feedback
    if (isset($summary['passfail'])) {
      $output .= '<div id="quiz_summary">' . $summary['passfail'] . '</div>' . "\n";
    }

    if (isset($summary['result'])) {
      $output .= '<div id="quiz_summary">' . $summary['result'] . '</div>' . "\n";
    }
  }

  $report_form = @drupal_get_form('Drupal\quiz\Form\QuizReportForm::staticCallback', $questions);

  return $output . drupal_render($report_form);
}

/**
 * Theme the quiz pager.
 */
function theme_quiz_pager($variables) {
  return quiz()
      ->getQuizHelper()
      ->getTakeJumperHelper($variables['quiz'], $variables['total'], $variables['siblings'], $variables['current'])
      ->render();
}
