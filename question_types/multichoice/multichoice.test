<?php

/**
 * @file
 * Test suite for choice Questions type module.
 */

/**
 * Test class for multichoice questions.
 */
class MultichoiceTestCase extends QuizQuestionTestCase {

  public static function getInfo() {
    return array(
      'name' => t('Multichoice'),
      'description' => t('Unit test for the multichoice question type.'),
      'group' => t('Quiz'),
    );
  }

  var $question_node_type = 'multichoice';

  function setUp() {
    parent::setUp(array('multichoice'));
  }

  /**
   * Create a default MCQ with default settings.
   */
  public function testCreateQuizQuestion() {
    $settings = array();
    $settings['title'] = 'MCQ 1 Title';
    $settings['body'] = array(LANGUAGE_NONE => array(array('value' => 'MCQ 1 body text')));
    $settings['type'] = 'multichoice';

    $settings['alternatives'][0]['answer']['value'] = 'A';
    $settings['alternatives'][0]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_chosen']['value'] = 'You chose A';
    $settings['alternatives'][0]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['feedback_if_not_chosen']['value'] = 'You did not choose A';
    $settings['alternatives'][0]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][0]['score_if_chosen'] = 1;
    $settings['alternatives'][0]['score_if_not_chosen'] = 0;

    $settings['alternatives'][1]['answer']['value'] = 'B';
    $settings['alternatives'][1]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_chosen']['value'] = 'You chose B';
    $settings['alternatives'][1]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['feedback_if_not_chosen']['value'] = 'You did not choose B';
    $settings['alternatives'][1]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][1]['score_if_chosen'] = 0;
    $settings['alternatives'][1]['score_if_not_chosen'] = 0;

    $settings['alternatives'][2]['answer']['value'] = 'C';
    $settings['alternatives'][2]['answer']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_chosen']['value'] = 'You chose C';
    $settings['alternatives'][2]['feedback_if_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['feedback_if_not_chosen']['value'] = 'You did not choose C';
    $settings['alternatives'][2]['feedback_if_not_chosen']['format'] = 'filtered_html';
    $settings['alternatives'][2]['score_if_chosen'] = 0;
    $settings['alternatives'][2]['score_if_not_chosen'] = 0;

    $settings['choice_multi'] = 0;
    $settings['choice_random'] = 0;
    $settings['choice_boolean'] = 0;
    $node = $this->drupalCreateNode($settings);
    $node = node_load($node->nid);

    $this->assertNotNull($node->alternatives[0]['id'], 'Alternative A was created as part of question save.');
    $this->assertNotNull($node->alternatives[1]['id'], 'Alternative B was created as part of question save.');
    $this->assertNotNull($node->alternatives[2]['id'], 'Alternative C was created as part of question save.');

    $this->assertEqual($node->alternatives[0]['answer']['value'], 'A', 'Alternative text A was saved and loaded correctly.');
    $this->assertEqual($node->alternatives[1]['answer']['value'], 'B', 'Alternative text B was saved and loaded correctly.');
    $this->assertEqual($node->alternatives[2]['answer']['value'], 'C', 'Alternative text C was saved and loaded correctly.');

    $this->assertEqual($node->alternatives[0]['answer']['format'], 'filtered_html', 'Alternative format A was saved and loaded correctly.');
    $this->assertEqual($node->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format B was saved and loaded correctly.');
    $this->assertEqual($node->alternatives[1]['answer']['format'], 'filtered_html', 'Alternative format C was saved and loaded correctly.');

    return $node;
  }

  public function testQuestionFeedback() {
    $this->drupalLogin($this->admin);

    $question_node = $this->testCreateQuizQuestion();
    $quiz_node = $this->linkQuestionToQuiz($question_node);

    // Login as non-admin.
    $this->drupalLogin($this->user);

    // Test incorrect question. No feedback, no answer.
    $quiz_node->feedback_time = QUIZ_FEEDBACK_NEVER;
    $quiz_node->display_feedback = 0;
    node_save($quiz_node);
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid][user_answer]" => $question_node->alternatives[1]['id'],
      ), t('Finish'));
    $this->assertNoPattern('/multichoice-icon correct/', 'Did not find correct answer.');
    $this->assertNoPattern('/multichoice-icon should/', 'Did not find correct suggestion.');
    $this->assertNoPattern('/multichoice-icon almost/', 'Did not find partial correct answer.');
    $this->assertNoText('You did not choose A');
    $this->assertNoText('You chose B');
    $this->assertNoText('You did not choose C');

    // Test incorrect question. Feedback, no answer.
    $quiz_node->feedback_time = QUIZ_FEEDBACK_END;
    $quiz_node->display_feedback = 0;
    node_save($quiz_node);
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid][user_answer]" => $question_node->alternatives[1]['id'],
      ), t('Finish'));
    $this->assertNoPattern('/multichoice-icon correct/', 'Did not find correct answer.');
    $this->assertNoPattern('/multichoice-icon should/', 'Did not find correct suggestion.');
    $this->assertNoPattern('/multichoice-icon almost/', 'Did not find partial correct answer.');
    $this->assertText('You did not choose A');
    $this->assertText('You chose B');
    $this->assertText('You did not choose C');

    // Test incorrect question. Feedback, answer.
    // This is really "Display solution"
    $quiz_node->feedback_time = QUIZ_FEEDBACK_END;
    $quiz_node->display_feedback = 1;
    node_save($quiz_node);
    $this->drupalGet("node/$quiz_node->nid/take");
    $this->drupalPost(NULL, array(
      "question[$question_node->nid][user_answer]" => $question_node->alternatives[1]['id'],
      ), t('Finish'));
    $this->assertPattern('/multichoice-icon correct/', 'Found correct answer.');
    $this->assertText('You did not choose A');
    $this->assertText('You chose B');
    $this->assertText('You did not choose C');
  }

  /**
   * Test multiple answers.
   */
  function testMultipleAnswers() {
    // @todo
  }

  /**
   * Test random order of choices.
   */
  function testRandomOrder() {
    // @todo
  }

  /**
   * Test scoring.
   */
  function testScoring() {
    // @todo
  }

  /**
   * Test simple scoring.
   */
  function testSimpleScoring() {
    // @todo
  }

}
