<?php
/* $Id$ */

/**
 * @file
 * Quiz Module
 *
 * This module allows the creation of interactive quizzes for site visitors
 */

/**
 * Implementation of hook_perm().
 */
function quiz_perm() {
  return array('create quiz');
}

/**
 * Implementation of hook_access().
 */
function quiz_access($op, $node) {
  global $user;
  
  if ($op == 'create') {
    return user_access('create quiz');
  }
  
  if ($op == 'update' || $op == 'delete') {
    if (user_access('create quiz') && ($user->uid == $node->uid)) {
      return TRUE;
    }  
  }
}

/**
 * Implementation of hook_node_name().
 */
function quiz_node_name($node) {
  return t('quiz');
}

/**
 * Implementation of hook_menu().
 */
function quiz_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/quiz', 'title' => t('quiz'),
      'access' => user_access('create quiz'));
  }
  else {
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node->type == 'quiz') {
          $items[] = array('path' => 'node/'. arg(1). '/questions', 'title' => t('add questions'),
          'callback' => 'quiz_questions',
          'access' => user_access('create quiz'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 5,
          'callback arguments' => $node);        
        }
      }
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function quiz_form(&$node) {
  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('quiz', $node));
  }
  $output .= form_textfield(t('Number of questions'), 'number_of_questions', $node->number_of_questions, 4, 6);
  $output .= form_checkbox(t('Shuffle questions'), 'shuffle', 1, $node->shuffle);
  $output .= form_checkbox(t('Backwards navigation'), 'backwards_navigation', 1, $node->backwards_navigation);
  $form_group = '';
  $form_group .= form_radio(t('At the end of the quiz'), 'feedback_time', 0, $node->feedback_time == 0);
  $form_group .= form_radio(t('After each question'), 'feedback_time', 1, $node->feedback_time == 1);
  $form_group .= form_radio(t('Do not show'), 'feedback_time', 2, $node->feedback_time == 2);
  $output .= form_group(t('When do you want to give feedback?'), $form_group);
  /* open, close */
  $options = array('Unlimited');
  for ($i = 1; $i<10; $i++) {
    $options[$i] = $i;
  }
  $output .= form_select(t('Number of takes'), 'takes', $node->takes, $options);

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function quiz_validate(&$node) {
  if (db_num_rows(db_query('SELECT quiz_nid FROM {quiz_results} WHERE quiz_nid=%d', $node->nid))) {
    /* drupal_set_message('Can not edit', 'error');
    drupal_goto('node/'. $node->nid);*/
  }
}

/**
 * Implementation of hook_insert().
 */
function quiz_insert($node) {
  db_query("INSERT INTO {quiz} (nid, number_of_questions, shuffle, backwards_navigation, feedback_time, open, close, takes) VALUES(%d, %d, %d, %d, %d, %d, %d, %d)", $node->nid, $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, 0, 0, $node->takes);
}

/**
 * Implementation of hook_update().
 */
function quiz_update($node) {
  db_query("UPDATE {quiz} SET number_of_questions=%d, shuffle=%d, backwards_navigation=%d, feedback_time=%d, open=%d, close=%d, takes=%d WHERE nid=%d", $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, 0, 0, $node->takes, $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function quiz_delete($node) {
  db_query("DELETE FROM {quiz} WHERE nid=%d", $node->nid);
  db_query("DELETE FROM {quiz_question} WHERE quiz_nid=%d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function quiz_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {quiz} WHERE nid = %d', $node->nid));
  $results = db_query('SELECT * FROM {quiz_question} WHERE quiz_nid = %d', $node->nid);
  while ($question = db_fetch_object($results)) {
    $additions->question_status[$question->question_nid] = $question->question_status;
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function quiz_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    //if (!isset($_SESSION['quiz_questions'])) {
    	
      $nids = array();
      $result = db_query('SELECT question_nid FROM {quiz_question} WHERE quiz_nid = %d AND question_status = %d ', $node->nid, 1);
      while ($question_node = db_fetch_object($result)) {
        $nids[] = $question_node->question_nid;
      }
      $node->number_of_questions -= count($nids);
      $result = db_query_range('SELECT question_nid FROM {quiz_question} WHERE quiz_nid = %d AND question_status = %d ORDER BY RAND()', $node->nid, 0, 0, $node->number_of_questions);
      while ($question_node = db_fetch_object($result)) {
        $nids[] = $question_node->question_nid;
      }
      if ($node->shuffle == 1) {
        shuffle($nids);
      }
      $_SESSION['quiz_questions'] = $nids;
      $_SESSION['points'] = 0;
    }
    $submit_message = t('Submit');
    if ($_POST['quiz_op'] == $submit_message) {
      $former_question_node = node_load(array('nid' => array_shift($_SESSION['quiz_questions'])));
      $_SESSION['points'] += module_invoke($former_question_node->type, 'evaluate_question', $former_question_node);
    }
    if (!empty($_SESSION['quiz_questions'])) {
      $question_node = node_load(array('nid' => $_SESSION['quiz_questions'][0]));
      $question = module_invoke($question_node->type, 'render_question', $question_node);
      
      // Don't show Submit button on preview
      if ($_POST['op'] != t('Preview')) {
        $question .= form_submit($submit_message, 'quiz_op');
      }

      $node->body = form($question);
    }
    else {
      unset($_SESSION['quiz_questions']);
      $node->body = $_SESSION['points'] .' points';
    }
  //}
}

/**
 * Implementation of hook_help().
 */
function quiz_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows you to create interactive quizzes for your visitors.');
    case 'node/add#quiz':
      return t('Quizzes are a collection of questions designed to create interactive tests');
    default:
      break;
  }
}

/**
 * Retrieve list of question types
 *
 * Determined by which modules implement the list_questions() hook
 *
 * @return
 *   Array of question types
 */
function _quiz_get_question_types() {
  return module_implements('list_questions');
}

/**
 * Retrieve list of vocabularies for all quiz question types
 *
 * @return
 *   An array containing vocabulary list
 */
function _quiz_get_vocabularies() {
  $vocabularies = array();
  foreach (_quiz_get_question_types() as $type) {
    foreach (taxonomy_get_vocabularies($type) as $vid => $vocabulary) {
      $vocabularies[$vid] = $vocabulary;
    }
  }
  return $vocabularies;
}

/**
 * Prints a taxonomy selection form for each vocabulary
 *
 * @return
 *   HTML output to print to screen
 */
function _quiz_taxonomy_select() {
  $output = '';
  foreach (_quiz_get_vocabularies() as $vid => $vocabulary) {
    $output .= taxonomy_form($vid);
  }
  return $output;
}

/**
 * Handles "add question" tab
 *
 * Displays form which allows questions to be filtered by taxonomy vocabulary,
 * and assigned to the given quiz
 */
function quiz_questions() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  
  if ($node = node_load(arg(1))) {
    drupal_set_title(check_plain($node->title));
    
    if ($op == t('Submit questions')) {

      // Update quiz with selected question options
      quiz_update_questions($node, $edit[question_status]);
      drupal_set_message(t('Questions updated successfully!'));
      
    } else {

      // Display filtering options
      $output = '<p>' .t('Select one or more terms to filter the question list:'). '</p>';
      $output .= _quiz_taxonomy_select();
      $output .= form_submit(t('Filter question list'));
      
      // Display filtered question list
      if (isset($edit[taxonomy]) && $edit[taxonomy] != array(0)) {
        $output .= '<p>' .t('Choose from the following questions to assign to this quiz'). '</p>';
        foreach (quiz_filter_question_list($edit[taxonomy]) as $question) {
          $rows[] = array(
            form_radio('', 'question_status]['. $question->nid, 0, $node->question_status[$question->nid] == 0),
            form_radio('', 'question_status]['. $question->nid, 1, $node->question_status[$question->nid] == 1),
            form_radio('', 'question_status]['. $question->nid, 2, $node->question_status[$question->nid] == 2),
            $question->question,
            $question->type);
        }
        $header = array(t('Random'), t('Always'), t('Never'), t('Question'), t('Type'));
        $output .= theme('table', $header, $rows);
        $output .= form_submit(t('Submit questions'));
      }
    }
    $output = form($output);
  }
  else {
    drupal_not_found();
  }
  return $output;
}

/**
 * Filters question list by given terms.
 *
 * @param $terms
 *   An array of vocabulary term IDs
 * @return 
 *   Array of questions which match terms
 */
function quiz_filter_question_list($terms = NULL) {

  // Retrieve question list from database, filtered on vocabulary terms
  $sql = "
    SELECT DISTINCT n.nid, n.type, n.body, n.format 
    FROM {node} n, {term_node} t
    WHERE n.type IN ('" .implode("','", _quiz_get_question_types()). "')";
  if ($terms != NULL) {
    $sql .= 'AND t.tid IN (' .implode(',', $terms). ')
      AND t.nid = n.nid';
  }
  $result = db_query($sql);
  
  // Create questions array
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $question->type = $node->type;
    $questions[] = $question;
  }
  
  return $questions;
}

/**
 * Updates questions assigned to the quiz
 *
 * @param $quiz
 *   Quiz node
 * @param $questions
 *   Array of questions and their status
 */
function quiz_update_questions($quiz, $questions) {
  db_query('DELETE FROM {quiz_question} WHERE quiz_nid=%d', $quiz->nid);
  foreach($questions as $key => $value) {
    db_query("INSERT INTO {quiz_question} (quiz_nid, question_nid, question_status) VALUES(%d, %d, %d)", $quiz->nid, $key, $value);
  }
}

// edit: taxonomy, view: taken, feedback, insert into quiz_results, view quiz_results
?>