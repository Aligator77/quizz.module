<?php
/* $Id$ */

/**
 * @file
 * Quiz Module
 *
 * This module allows the creation of interactive quizzes for site visitors
 */

/**
 * Implementation of hook_perm().
 */
function quiz_perm() {
  return array('create quiz');
}

/**
 * Implementation of hook_access().
 */
function quiz_access($op, $node) {
  global $user;
  
  if ($op == 'create') {
    return user_access('create quiz');
  }
  
  if ($op == 'update' || $op == 'delete') {
    if (user_access('create quiz') && ($user->uid == $node->uid)) {
      return TRUE;
    }  
  }
}

/**
 * Implementation of hook_node_name().
 */
function quiz_node_name($node) {
  return t('quiz');
}

/**
 * Implementation of hook_menu().
 */
function quiz_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/quiz', 'title' => t('quiz'),
      'access' => user_access('create quiz'));
  }
  else {
      if (arg(0) == 'node' && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node->type == 'quiz') {
          $items[] = array('path' => 'node/'. arg(1). '/questions', 'title' => t('add questions'),
          'callback' => 'quiz_questions',
          'access' => user_access('create quiz'),
          'type' => MENU_LOCAL_TASK,
          'weight' => 5,
          'callback arguments' => $node);        
        }
      }
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function quiz_form(&$node) {
  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('quiz', $node));
  }
  $output .= form_textfield(t('Number of questions'), 'number_of_questions', $node->number_of_questions, 4, 6);
  $output .= form_checkbox(t('Shuffle questions'), 'shuffle', 1, $node->shuffle);
  $output .= form_checkbox(t('Backwards navigation'), 'backwards_navigation', 1, $node->backwards_navigation);
  $form_group = '';
  $form_group .= form_radio(t('At the end of the quiz'), 'feedback_time', 0, $node->feedback_time == 0);
  $form_group .= form_radio(t('After each question'), 'feedback_time', 1, $node->feedback_time == 1);
  $form_group .= form_radio(t('Do not show'), 'feedback_time', 2, $node->feedback_time == 2);
  $output .= form_group(t('When do you want to give feedback?'), $form_group);
  /* open, close */
  $options = array('Unlimited');
  for ($i = 1; $i<10; $i++) {
    $options[$i] = $i;
  }
  $output .= form_select(t('Number of takes'), 'takes', $node->takes, $options);

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function quiz_validate(&$node) {
  if (db_num_rows(db_query('SELECT quiz_nid FROM {quiz_results} WHERE quiz_nid=%d', $node->nid))) {
    /* drupal_set_message('Can not edit', 'error');
    drupal_goto('node/'. $node->nid);*/
  }
}

/**
 * Implementation of hook_insert().
 */
function quiz_insert($node) {
  db_query("INSERT INTO {quiz} (nid, number_of_questions, shuffle, backwards_navigation, feedback_time, open, close, takes) VALUES(%d, %d, %d, %d, %d, %d, %d, %d)", $node->nid, $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, 0, 0, $node->takes);
}

/**
 * Implementation of hook_update().
 */
function quiz_update($node) {
  db_query("UPDATE {quiz} SET number_of_questions=%d, shuffle=%d, backwards_navigation=%d, feedback_time=%d, open=%d, close=%d, takes=%d WHERE nid=%d", $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, 0, 0, $node->takes, $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function quiz_delete($node) {
  db_query("DELETE FROM {quiz} WHERE nid=%d", $node->nid);
  db_query("DELETE FROM {quiz_question} WHERE quiz_nid=%d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function quiz_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {quiz} WHERE nid = %d', $node->nid));
  $results = db_query('SELECT * FROM {quiz_question} WHERE quiz_nid = %d', $node->nid);
  while ($question = db_fetch_object($results)) {
    $additions->question_status[$question->question_nid] = $question->question_status;
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function quiz_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    //if (!isset($_SESSION['quiz_questions'])) {
    	
      $nids = array();
      $result = db_query('SELECT question_nid FROM {quiz_question} WHERE quiz_nid = %d AND question_status = %d ', $node->nid, 1);
      while ($question_node = db_fetch_object($result)) {
        $nids[] = $question_node->question_nid;
      }
      $node->number_of_questions -= count($nids);
      $result = db_query_range('SELECT question_nid FROM {quiz_question} WHERE quiz_nid = %d AND question_status = %d ORDER BY RAND()', $node->nid, 0, 0, $node->number_of_questions);
      while ($question_node = db_fetch_object($result)) {
        $nids[] = $question_node->question_nid;
      }
      if ($node->shuffle == 1) {
        shuffle($nids);
      }
      $_SESSION['quiz_questions'] = $nids;
      $_SESSION['points'] = 0;
    }
    $submit_message = t('Submit');
    if ($_POST['quiz_op'] == $submit_message) {
      $former_question_node = node_load(array('nid' => array_shift($_SESSION['quiz_questions'])));
      $_SESSION['points'] += module_invoke($former_question_node->type, 'evaluate_question', $former_question_node);
    }
    if (!empty($_SESSION['quiz_questions'])) {
      $question_node = node_load(array('nid' => $_SESSION['quiz_questions'][0]));
      $question = module_invoke($question_node->type, 'render_question', $question_node);
      
      // Don't show Submit button on preview
      if ($_POST['op'] != t('Preview')) {
        $question .= form_submit($submit_message, 'quiz_op');
      }

      $node->body = form($question);
    }
    else {
      unset($_SESSION['quiz_questions']);
      $node->body = $_SESSION['points'] .' points';
    }
  //}
}

/**
 * Implementation of hook_help().
 */
function quiz_help($section) {
  switch ($section) {
    case 'admin/help#quiz':
      return t('
<h3>Description</h3>
<p>The quiz module allows users to administer a quiz, as a sequence of questions, and track the answers given. It allows for the creation of questions (and their answers), and organizes these questions into a quiz. Finally, it provides a mechanism for ensuring question quality through a combination of community revision and moderation. Its target audience includes educational institutions, online training programs, employers, and people who just want to add a fun activity for their visitors to their Drupal site.</p>
<h3>Creating Your First Quiz</h3>
<p>Creating an initial quiz requires three steps:</p>
<ol>
  <li>Create at least one taxonomy vocabulary and assign it to the quiz and question type modules</li>
  <li>Create a series of questions</li>
  <li>Create a quiz based on the series of questions</li>
</ol>
<p>Also note that for anyone but the site administrator, creating quizzes requires the <strong>create quiz</strong> privilege, and creating questions requires the <strong>administer <em>question type</em></strong> privilege. These settinga can be configured in <a href="%admin-access">administer >> access control</a>.</p>
<h4>Setting up a vocabulary</h4>
<ol>
  <li>If not already enabled, go to the <a href="%admin-modules">administer >> modules</a> section of the control panel and check the <strong>enable</strong> checkbox to enable the <strong>taxonomy module</strong>.</li>
  <li>If you do not already have a taxonomy <strong>vocabulary</strong> suitable for quizzes, go to <a href="%admin-taxonomy">administer >> categories</a> and create a vocabulary for quizzes (for example, <strong>Quiz Topics</strong>). Ensure that under <strong>Types</strong>, both <strong>quiz</strong> and all question types (for example, <strong>multichoice</strong>) are selected. Depending on your needs, you may wish to create a hierarchical vocabulary, so that topics can be sub-divided into smaller areas, and/or enable multiple select to associate quizzes and questions with more than one category.</li>
  <li>Add a series of <strong>terms</strong> to the vocabulary to which questions and quizzes can be assigned. For example:
    <ul>
      <li>Literature
        <ul>
          <li>Children\'s books</li>
          <li>Poetry</li>
          <li>Shakespeare</li>
        </ul>
      </li>
      <li>Mathematics
        <ul>
          <li>Algebra</li>
          <li>Trigonometry</li>
          <li>Calculus</li>
        </ul>
      </li>
      <li>Information Technology
        <ul>
          <li>Hardware</li>
          <li>Programming</li>
          <li>Databases</li>
        </ul>
      </li>
  </li>
</ol>
<h4>Creating quiz questions</h4>
<ol>
  <li>Begin by clicking <a href="%create-content">create content</a>, and then select a question type node (for example, <a href="%multichoice">multichoice</a>)</li>
  <li>Fill out the question form. The presented interface will vary depending on the question type, but for multiple choice questions:
    <dl>
      <dt><strong>Title</strong></dt>
      <dd>Question title. This will be displayed as the heading of the question.</dd>
      <dt><strong>Taxonomy selection</strong></dt>
      <dd>Any taxonomy vocabularies that are assigned to the question type will be displayed. Select from the terms displayed in order to assign questions to vocabulary terms so that they can be filtered in the quiz creation process.</dd>
      <dt><strong>Question</strong></dt>
      <dd>The actual question text (for example, <strong>What is 2+2?</strong>).</dd>
      <dt><strong>Multiple Answers</strong></dt>
      <dd>Whether or not the question has multiple correct answers, such as a "Select all that apply" question.</dd>
      <dt><strong>Correct</strong></dt>
      <dd>Indicates that given answer is a correct answer.</dd>
      <dt><strong>Answer</strong></dt>
      <dd>An answer choice (for example, <strong>4</strong>). If more answers are required, check <strong>I need more answers</strong> and click the <b>Preview</b> button.</dd>
      <dt><strong>Feedback</strong></dt>
      <dd>Feedback, if supplied, will be provided to the student either immediately after answering the question, at the end of the quiz, or not at all (feedback options are configured in quizzes).</dd>
    </dl>
  </li>
  <li>Repeat for each question you would like included on the quiz.</li>
</ol>
<h4>Creating the quiz</h4>
<ol>
  <li>Go to <a href="%create-quiz">create content >> quiz</a> to access the quiz creation form.</li>
  <li>Fill out the form to set the quiz options:
    <dl>
      <dt><strong>Title</strong></dt>
      <dd>Quiz title. This will be displayed as the heading of the quiz.</dd>
      <dt><strong>Taxonomy selection</strong></dt>
      <dd>Any taxonomy vocabularies that are assigned to the quiz type will be displayed. Select from the terms displayed in order to assign the quiz to vocabulary terms.</dd>
      <dt><strong>Number of questions</strong></dt>
      <dd>Total number of questions on quiz.</dd>
      <dt><strong>Shuffle questions</strong></dt>
      <dd>Whether or not to shuffle (randomize) the questions.</dd>
      <dt><strong>Backwards Navigation</strong></dt>
      <dd>Whether or not to allow students to return to a previous question.</dd>
      <dt><strong>Answer</strong></dt>
      <dd>An answer choice (for example, <strong>4</strong>)</dd>
      <dt><strong>Feedback</strong></dt>
      <dd>Set options on when and whether question feedback should appear.</dd>
      <dt><strong>Number of takes</strong></dt>
      <dd>Number of takes to allow user. Varies from 1-9 or Unlimited times.</dd>
    </dl>
  </li>
  <li>Once the quiz has been created, click the <b>add questions</b> tab to assign questions to the quiz.</li>
  <li>Begin by selecting one or more terms from the taxonomy list and click <strong>Filter question list</strong>. This will bring up a selection of questions matching the selected vocabulary terms.</li>
  <li>Select a radio button next to each question indicating if the question should appear (Randomly, Always, or Never), and click <strong>Submit questions</strong>.</li>
  <li>Repeat process until satisfied with question selection.</li>
</ol>
    ', array('%admin-access' => url('admin/access'), '%admin-modules' => url('admin/modules'), '%admin-taxonomy' => url('admin/taxonomy'), '%create-content' => url('node/add'), '%multichoice' => url('node/add/multichoice'), '%create-quiz' => url('node/add/quiz')));
    case 'admin/modules#description':
      return t('Allows you to create interactive quizzes for your visitors.');
    case 'node/add#quiz':
      return t('Quizzes are a collection of questions designed to create interactive tests');
    default:
      break;
  }
}

/**
 * Retrieve list of question types
 *
 * Determined by which modules implement the list_questions() hook
 *
 * @return
 *   Array of question types
 */
function _quiz_get_question_types() {
  return module_implements('list_questions');
}

/**
 * Retrieve list of vocabularies for all quiz question types
 *
 * @return
 *   An array containing vocabulary list
 */
function _quiz_get_vocabularies() {
  $vocabularies = array();
  foreach (_quiz_get_question_types() as $type) {
    foreach (taxonomy_get_vocabularies($type) as $vid => $vocabulary) {
      $vocabularies[$vid] = $vocabulary;
    }
  }
  return $vocabularies;
}

/**
 * Prints a taxonomy selection form for each vocabulary
 *
 * @param
 *   Default selected values
 * @return
 *   HTML output to print to screen
 */
function _quiz_taxonomy_select($values = 0) {
  $output = '';
  foreach (_quiz_get_vocabularies() as $vid => $vocabulary) {
    $output .= taxonomy_form($vid, $values);
  }
  return $output;
}

/**
 * Retrieve list of questions assigned to quiz
 *
 * @param $quiz
 *   Quiz node
 * @return 
 *   Array of questions
 */
function _quiz_get_questions($quiz) {

  // Retrieve list of questions
  $result = db_query("
    SELECT n.nid, n.type, n.body, n.format, q.question_status
    FROM {node} n, {quiz_question} q
    WHERE n.nid = q.question_nid
    AND q.quiz_nid = %d", $quiz->nid);
  
  // Create questions array
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $question->type = $node->type;
    switch ($node->question_status) {
      case 2:
        $question->status = t('Never');
      case 1:
        $question->status = t('Always');
      default:
        $question->status = t('Random');
    }
    $questions[] = $question;
  }

  return $questions;
}


/**
 * Print a table containing array of questions and options
 *
 * @param $questions
 *   Array of question nodes
 * @param $options
 *   Whether or not to show question options
 * @return
 *   HTML to output table
 */
function quiz_print_question_table($questions, $options = true) {
  $output = '';
  if ($options == true) {
    foreach ($questions as $question) {
      $rows[] = array(
        form_radio('', 'question_status]['. $question->nid, 0, $node->question_status[$question->nid] == 0),
        form_radio('', 'question_status]['. $question->nid, 1, $node->question_status[$question->nid] == 1),
        form_radio('', 'question_status]['. $question->nid, 2, $node->question_status[$question->nid] == 2),
        $question->question,
        $question->type);
    }
    $header = array(t('Random'), t('Always'), t('Never'), t('Question'), t('Type'));
  } else {
    foreach ($questions as $question) {
      $rows[] = array(
        $question->status,
        $question->question,
        $question->type);
    }
    $header = array(t('Status'), t('Question'), t('Type'));
  }
  if (isset($rows)) {
    $output .= theme('table', $header, $rows);
  } else {
    $output .= 'No questions found.';
  }
  return $output;
}


/**
 * Handles "add question" tab
 *
 * Displays form which allows questions to be filtered by taxonomy vocabulary,
 * and assigned to the given quiz
 */
function quiz_questions() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];

  
  if ($node = node_load(arg(1))) {
    drupal_set_title(check_plain($node->title));

    if ($op == t('Submit questions')) {

      // Update quiz with selected question options
      quiz_update_questions($node, $edit[question_status]);
      drupal_set_message(t('Questions updated successfully!'));
      
    }

    // Display filtering options
    $output = '<p>' .t('Select one or more terms to filter the question list:'). '</p>';
    $output .= _quiz_taxonomy_select($edit[taxonomy]);
    $output .= form_submit(t('Filter question list'));
      
    // Display filtered question list
    if (isset($edit[taxonomy])) {
      $output .= '<p>' .t('The following questions met the search criteria:'). '</p>';
      $questions = quiz_filter_question_list($edit[taxonomy]);
      $output .= quiz_print_question_table($questions);
    }
      
    // Display assigned question list
    $output .= '<p>' .t('Questions assigned to this quiz:'). '</p>';
    $questions = _quiz_get_questions($node);
    $output .= quiz_print_question_table($questions, false);

    $output .= form_submit(t('Submit questions'));


    $output = form($output);
  }
  else {
    drupal_not_found();
  }
  return $output;
}

/**
 * Filters question list by given terms.
 *
 * @param $terms
 *   An array of vocabulary term IDs
 * @return 
 *   Array of questions which match terms
 */
function quiz_filter_question_list($terms = NULL) {

  // Retrieve question list from database, filtered on vocabulary terms
  $sql = "
    SELECT DISTINCT n.nid, n.type, n.body, n.format 
    FROM {node} n, {term_node} t
    WHERE n.type IN ('" .implode("','", _quiz_get_question_types()). "')";
  if ($terms != NULL) {
    $sql .= 'AND t.tid IN (' .implode(',', $terms). ')
      AND t.nid = n.nid';
  }
  $result = db_query($sql);
  
  // Create questions array
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $question->type = $node->type;
    $questions[] = $question;
  }
  
  return $questions;
}

/**
 * Updates questions assigned to the quiz
 *
 * @param $quiz
 *   Quiz node
 * @param $questions
 *   Array of questions and their status
 */
function quiz_update_questions($quiz, $questions) {
  db_query('DELETE FROM {quiz_question} WHERE quiz_nid=%d', $quiz->nid);
  foreach($questions as $key => $value) {
    db_query("INSERT INTO {quiz_question} (quiz_nid, question_nid, question_status) VALUES(%d, %d, %d)", $quiz->nid, $key, $value);
  }
}

// edit: taxonomy, view: taken, feedback, insert into quiz_results, view quiz_results
?>