<?php
// $Id$

/**
 * @file
 * Quiz Module
 *
 * This module allows the creation of interactive quizzes for site visitors
 */

/*
 * Define question statuses...
 */
define("QUESTION_RANDOM", 0);
define("QUESTION_ALWAYS", 1);
define("QUESTION_NEVER", 2);






/**
 * Implementation of hook_perm().
 */
function quiz_perm() {
  return array('create quizzes', 'access quizzes');
}

/**
 * Implementation of hook_access().
 */
function quiz_access($op, $node) {
  global $user;

  if ($op == 'view') {
    return user_access('access quizzes');
  }

  if ($op == 'create') {
    return user_access('create quizzes');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('create quizzes') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_node_info().
 */
function quiz_node_info() {
  return array('quiz' => array('name' => t('quiz'), 'base' => 'quiz'));
}

/**
 * Implementation of hook_menu().
 */
function quiz_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'node/add/quiz',
      'title' => t('quiz'),
      'access' => user_access('create quizzes'));
  }
  else {
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if ($node->type == 'quiz') {

        // Menu item for creating adding questions to quiz
        $items[] = array(
          'path' => 'node/'. arg(1) .'/questions',
          'title' => t('add questions'),
          'callback' => 'quiz_questions',
          'access' => user_access('create quizzes'),
          'type' => MENU_LOCAL_TASK,);

        // Menu item for quiz taking interface
        $items[] = array(
          'path' => 'node/'. arg(1) .'/quiz/start',
          'title' => t('take quiz'),
          'callback' => 'quiz_take_quiz',
          'access' => user_access('access quizzes'),
          'type' => MENU_LOCAL_TASK,);
      }
    }
    else {
    

      $items[] = array(
        'path' => 'admin/quiz/' . arg(2) . "/view",
        'title' => t('view quiz'),
        'callback' => 'quiz_admin_results',
        'access' => user_access('administer quizzes'),
        'type' => MENU_CALLBACK);
                       
      $items[] = array(
        'path' => 'admin/quiz/' . arg(2) . "/delete",
        'title' => t('delete quiz'),
        'callback' => 'quiz_admin_result_delete',
        'access' => user_access('administer quizzes'),
        'type' => MENU_CALLBACK);

      $items[] = array(
        'path' => 'admin/quiz',
        'title' => t('quizzes'),
        'callback' => 'quiz_admin',
        'access' => user_access('administer quizzes'),
        'type' => MENU_NORMAL_ITEM);
    }
  }

  return $items;
}

/**
 * Implementation of hook_form().
 */
function quiz_form(&$node) {

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $node->title,
    '#description' => t('The name of the quiz'),
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#default_value' => $node->body,
    '#description' => t('A description of what the quiz entails'),
    '#required' => TRUE,
  );
  $form['body_filter']['format'] = filter_form($node->format);

  $form['number_of_questions'] = array(
    '#type' => 'textfield',
    '#title' => t('Number of questions'),
    '#default_value' => ($node->number_of_questions ? $node->number_of_questions : 10),
    '#description' => t('The number of questions to include in this quiz from the question bank'),
    '#required' => TRUE,
  );

  $form['shuffle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Shuffle questions'),
    '#default_value' => $node->shuffle ? $node->shuffle : 1,
    '#description' => t('Whether to shuffle/randomize the questions on the quiz'),
  );

  $form['backwards_navigation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Backwards navigation'),
    '#default_value' => $node->backwards_navigation,
    '#description' => t('Whether to allow student to go back and revisit their answers'),
  );

  $form['feedback'] = array(
    '#type' => 'fieldset',
    '#title' => t('When do you want to give feedback?'),
  );

  $form['feedback']['feedback_time'] = array(
    '#type' => 'radios',
    '#default_value' => $node->feedback_time,
    '#options' => array(
      t('At the end of the quiz'),
      t('After each question'),
      t('Do not show')
    ),
    '#description' => t('Indicates at what point feedback for each question will be given to the student'),
  );
  
  list($d['year'], $d['month'], $d['day']) = explode('-', substr($node->open, 0, 10));
  $form['open'] = array(
    '#type' => 'date',
    '#title' => t('Open date'),
    '#default_value' => $d,
    '#description' => t('The date students should be able to start taking this quiz'),
  );

  list($d['year'], $d['month'], $d['day']) = explode('-', substr($node->close, 0, 10));
  $form['close'] = array(
    '#type' => 'date',
    '#title' => t('Close date'),
    '#default_value' => $d,
    '#description' => t('The date the quiz will close and prevent students from taking the quiZ'),
  );

  $options = array('Unlimited');
  for ($i = 1; $i < 10; $i++) {
    $options[$i] = $i;
  }
  $form['takes'] = array(
    '#type' => 'select',
    '#title' => t('Number of takes'),
    '#default_value' => $node->takes,
    '#options' => $options,
    '#description' => t('The number of times a student is allowed to take the quiz'),
  );

  return $form;
}

/**
 * Implementation of hook_validate().
 */
function quiz_validate(&$node) {
  if (!$node->nid && empty($_POST)) return;

  if (empty($node->body)) {
    form_set_error('body', t('Description is required.'));
  }
  if ($node->number_of_questions < 1) {
    form_set_error('number_of_questions', t('Number of questions is required and must be a positive number.'));
  }
  if (mktime(0,0,0, $node->open['month'], $node->open['day'], $node->open['year']) > mktime(0,0,0, $node->close['month'], $node->close['day'], $node->close['year'])) {
    form_set_error('close', t('Close date before open date'));
    form_set_error('open', t('Open date after close date'));
  }
}

/**
 * Implementation of hook_insert().
 */
function quiz_insert($node) {
  $open = $node->open['year'].'-'.$node->open['month'].'-'.$node->open['day'];
  $close = $node->close['year'].'-'.$node->close['month'].'-'.$node->close['day'];
    
  db_query("INSERT INTO {quiz} (nid, number_of_questions, shuffle, backwards_navigation, feedback_time, open, close, takes) VALUES(%d, %d, %d, %d, %d, '%s', '%s', %d)", $node->nid, $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, $open, $close, $node->takes);
}

/**
 * Implementation of hook_update().
 */
function quiz_update($node) {
  $open = $node->open['year'].'-'.$node->open['month'].'-'.$node->open['day'];
  $close = $node->close['year'].'-'.$node->close['month'].'-'.$node->close['day'];
    
  db_query("UPDATE {quiz} SET number_of_questions = %d, shuffle = %d, backwards_navigation = %d, feedback_time = %d, open = '%s', close = '%s', takes = %d WHERE nid = %d", $node->number_of_questions, $node->shuffle, $node->backwards_navigation, $node->feedback_time, $open, $close, $node->takes, $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function quiz_delete($node) {
  db_query("DELETE FROM {quiz} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {quiz_questions} WHERE quiz_nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function quiz_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {quiz} WHERE nid = %d', $node->nid));
  $results = db_query('SELECT * FROM {quiz_questions} WHERE quiz_nid = %d', $node->nid);
  while ($question = db_fetch_object($results)) {
    $additions->question_status[$question->question_nid] = $question->question_status;
  }
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function quiz_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser && user_access('create quizzes')) {

    // Format quiz options
    $node->body .= '<h3>'. t('Quiz Options') .'</h3>';
    $header = array(
      t('# of Questions'),
      t('Shuffle?'),
      t('Allow Backwards?'),
      t('Feedback'),
      t('Number of takes'));
    $shuffle = $node->shuffle == 1 ? t('Yes') : t('No');
    $backwards = $node->backwards_navigation == 1 ? t('Yes') : t('No');
    $feedback_options = array(
      t('At the end of each quiz'),
      t('After each question'),
      t('Do not show'));
    $feedback = $feedback_options[$node->feedback_time];
    $takes = $node->takes == 0 ? t('Unlimited') : "$node->takes minutes";
    $rows = array();
    $rows[] = array(
      $node->number_of_questions,
      $shuffle,
      $backwards,
      $feedback,
      $takes);
    $node->body .= theme('table', $header, $rows);
    
    
    // Format Quiz Dates
    $node->body .= '<h3>'. t('Quiz start/end') .'</h3>';
    $node->body .= "<p>" . date("l, jS F Y", strtotime($node->open)) . " &mdash " . date("l, jS F Y", strtotime($node->close)) ."</p>";
    $node->body .= "<p><strong>Days quiz live for:</strong> " . floor((strtotime($node->close) - strtotime($node->open)) / 60 / 60 / 24) . "</p>";
    
    $remaining = floor((strtotime($node->close) - time()) / 60 / 60 / 24);
    $remaining = ($remaining < 0)?"Expired":$remaining;
    $node->body .= "<p><strong>Days remaining:</strong> " . $remaining . "</p>";
    
    $elapsed = floor((time() - strtotime($node->open)) / 60 / 60 / 24);
    $elapsed = ($elapsed < 0)?(-$elapsed)." days to go":$elapsed;
    $node->body .= "<p><strong>Days since start:</strong> " . $elapsed . "</p>";
    

    // Format taxonomy selection (if applicable)
    if (function_exists(taxonomy_node_get_terms)) {
      $node->body .= '<h3>'. t('Taxonomy selection') .'</h3>';
      $terms = array();
      
      foreach(taxonomy_node_get_terms($node->nid) as $term) {
        $terms[] = $term->name;
      }
      if (!empty($terms)) {
        $terms = implode(', ', $terms);
        $node->body .= "<p>$terms</p>";
      }
      else {
        $node->body .= '<p>'. t('No selected terms found') .'</p>';
      }
    }

    // Format quiz questions
    $node->body .= '<h3>'. t('Quiz Questions') .'</h3>';
    $questions = _quiz_get_questions();
    $node->body .= quiz_print_question_table($questions);

  }
}

/**
 * Handles quiz taking
 *
 * @return
 *  HTML output for page
 */
function quiz_take_quiz() {
  global $user;

  if (arg(0) == 'node' && is_numeric(arg(1)) && user_access('access quizzes')) {
    if ($quiz = node_load(arg(1))) {

      if (!isset($_SESSION['quiz_questions'])) {

        // First time running through quiz
        if ($rid = quiz_start_actions($user->uid, $quiz->nid)) {

          // Create question list
          $questions = quiz_build_question_list($quiz->nid);

          // Initialize session variables
          $_SESSION['quiz_questions'] = $questions;
          $_SESSION['rid'] = $rid;

        }
        else {
          drupal_set_message(t('There was a problem starting the quiz. Please try again later.', 'error'));
        }
      }

      // Check for answer submission
      if ($_POST['op'] == t('Submit')) {
        $former_question = node_load(array('nid' => array_shift($_SESSION['quiz_questions'])));
        $result = module_invoke($former_question->type, 'evaluate_question', $former_question->nid);
        db_query("REPLACE {quiz_question_results} VALUES(%d, %d, '%s')", $_SESSION['rid'], $former_question->nid, serialize($result));
      }

      // Check if at the end of quiz
      if (!empty($_SESSION['quiz_questions'])) {

        // Load the next question
        $question_node = node_load(array('nid' => $_SESSION['quiz_questions'][0]));

        $node->body = module_invoke($question_node->type, 'render_question', $question_node);

      }
      else {

        // At the end of quiz...
        
        //First - update the result to show we have finished.
        db_query("UPDATE {quiz_result} SET time_end = NOW() WHERE rid = %d", $_SESSION['rid']);
        
        //display results and remove session variables
        $node->body = "Your score: " .quiz_calculate_score($_SESSION['rid']);
        unset($_SESSION['quiz_questions']);
        unset($_SESSION['rid']);

      }
    }
    else {
      drupal_not_found();
    }
    return $node->body; // TODO: Can this be THEMED?
  }
}

/**
 * Actions to take place at the start of a quiz
 *
 * @param $uid
 *   User ID
 * @param $nid
 *   Quiz node ID
 * @return integer
 *   Returns quiz_result rid, or false if there is an error.
 */
function quiz_start_actions($uid, $nid) {
  // Validate number of takes
  if ($quiz->takes != 0) {
    $result = db_result(db_query('SELECT COUNT(rid) AS count FROM {quiz_result} WHERE uid = %d AND quiz_nid = %d', $uid, $nid));
    $quiz = node_load($nid);
    if ($result >= $quiz->takes) {
      drupal_set_message(t('Sorry, you have already taken this quiz %d times.', $result->count), 'error');
      return FALSE;
    }
  }

  // Insert quiz_results record
  $rid = db_next_id('quiz_results_rid');
  $result = db_query("INSERT INTO {quiz_result} (rid, quiz_nid, uid, time_start) VALUES (%d, %d, %d, NOW())", $rid, $nid, $uid);
  if ($result) {
    return $rid;
  }
  else {
    return FALSE;
  }
}

/**
 * Calculates the score student received on quiz
 *
 * @param $rid
 *   Quiz result ID
 * @return integer
 *   Total score
 */
function quiz_calculate_score($rid) {
  $score = 0;
  $result = db_query("SELECT
                       qqr.answer answer,
                       qqr.question_nid qnid,
                       n.type type
                     FROM {quiz_question_results} qqr, {node} n
                     WHERE qqr.result_rid = %d AND n.nid = qqr.question_nid", $rid);
  
  
  while($r = db_fetch_array($result)) {
    $r['answer'] = unserialize($r['answer']);
    $s = module_invoke($r['type'], 'calculate_result', $r['answer']['answers'], $r['answer']['tried']);
    
    $score += $s;
    $r['score'] = $s;
  }

  return $score;
}

/**
 * Retrieves a question list for a given quiz
 *
 * @param $nid
 *   Quiz node ID
 * @return
 *   Array of question node IDs
 */
function quiz_build_question_list($nid) {
  $questions = array();
  $quiz = node_load($nid);

  // Get required questions first
  $result = db_query('SELECT question_nid FROM {quiz_questions} WHERE quiz_nid = %d AND question_status = %d', $nid, QUESTION_ALWAYS);
  while ($question_node = db_fetch_object($result)) {
    $questions[] = $question_node->question_nid;
  }

  // Get random questions for the remainder
  $quiz->number_of_questions -= count($questions);
  $result = db_query_range('SELECT question_nid FROM {quiz_questions} WHERE quiz_nid = %d AND question_status = %d ORDER BY RAND()', $nid, QUESTION_RANDOM, 0, $quiz->number_of_questions);
  while ($question_node = db_fetch_object($result)) {
    $questions[] = $question_node->question_nid;
  }

  // Shuffle questions if required
  if ($quiz->shuffle == 1) {
    shuffle($questions);
  }

  return $questions;
}

/**
 * Implementation of hook_help().
 */
function quiz_help($section) {
  switch ($section) {
    case 'admin/help#quiz':
      return t('
<h3>Description</h3>
<p>The quiz module allows users to administer a quiz, as a sequence of questions, and track the answers given. It allows for the creation of questions (and their answers), and organizes these questions into a quiz. Finally, it provides a mechanism for ensuring question quality through a combination of community revision and moderation. Its target audience includes educational institutions, online training programs, employers, and people who just want to add a fun activity for their visitors to their Drupal site.</p>
<h3>Creating Your First Quiz</h3>
<p>Creating an initial quiz requires three steps:</p>
<ol>
  <li>Create at least one taxonomy vocabulary and assign it to the quiz and question type modules</li>
  <li>Create a series of questions</li>
  <li>Create a quiz based on the series of questions</li>
</ol>
<p>Also note that for anyone but the site administrator, creating quizzes requires the <strong>create quiz</strong> privilege, and creating questions requires the <strong>administer <em>question type</em></strong> privilege. These settinga can be configured in <a href="%admin-access">administer >> access control</a>.</p>
<h4>Setting up a vocabulary</h4>
<ol>
  <li>If not already enabled, go to the <a href="%admin-modules">administer >> modules</a> section of the control panel and check the <strong>enable</strong> checkbox to enable the <strong>taxonomy module</strong>.</li>
  <li>If you do not already have a taxonomy <strong>vocabulary</strong> suitable for quizzes, go to <a href="%admin-taxonomy">administer >> categories</a> and create a vocabulary for quizzes (for example, <strong>Quiz Topics</strong>). Ensure that under <strong>Types</strong>, both <strong>quiz</strong> and all question types (for example, <strong>multichoice</strong>) are selected. Depending on your needs, you may wish to create a hierarchical vocabulary, so that topics can be sub-divided into smaller areas, and/or enable multiple select to associate quizzes and questions with more than one category.</li>
  <li>Add a series of <strong>terms</strong> to the vocabulary to which questions and quizzes can be assigned. For example:
    <ul>
      <li>Literature
        <ul>
          <li>Children\'s books</li>
          <li>Poetry</li>
          <li>Shakespeare</li>
        </ul>
      </li>
      <li>Mathematics
        <ul>
          <li>Algebra</li>
          <li>Trigonometry</li>
          <li>Calculus</li>
        </ul>
      </li>
      <li>Information Technology
        <ul>
          <li>Hardware</li>
          <li>Programming</li>
          <li>Databases</li>
        </ul>
      </li>
  </li>
</ol>
<h4>Creating quiz questions</h4>
<ol>
  <li>Begin by clicking <a href="%create-content">create content</a>, and then select a question type node (for example, <a href="%multichoice">multichoice</a>)</li>
  <li>Fill out the question form. The presented interface will vary depending on the question type, but for multiple choice questions:
    <dl>
      <dt><strong>Title</strong></dt>
      <dd>Question title. This will be displayed as the heading of the question.</dd>
      <dt><strong>Taxonomy selection</strong></dt>
      <dd>Any taxonomy vocabularies that are assigned to the question type will be displayed. Select from the terms displayed in order to assign questions to vocabulary terms so that they can be filtered in the quiz creation process.</dd>
      <dt><strong>Question</strong></dt>
      <dd>The actual question text (for example, <strong>What is 2+2?</strong>).</dd>
      <dt><strong>Multiple Answers</strong></dt>
      <dd>Whether or not the question has multiple correct answers, such as a "Select all that apply" question.</dd>
      <dt><strong>Correct</strong></dt>
      <dd>Indicates that given answer is a correct answer.</dd>
      <dt><strong>Answer</strong></dt>
      <dd>An answer choice (for example, <strong>4</strong>). If more answers are required, check <strong>I need more answers</strong> and click the <b>Preview</b> button.</dd>
      <dt><strong>Feedback</strong></dt>
      <dd>Feedback, if supplied, will be provided to the student either immediately after answering the question, at the end of the quiz, or not at all (feedback options are configured in quizzes).</dd>
    </dl>
  </li>
  <li>Repeat for each question you would like included on the quiz.</li>
</ol>
<h4>Creating the quiz</h4>
<ol>
  <li>Go to <a href="%create-quiz">create content >> quiz</a> to access the quiz creation form.</li>
  <li>Fill out the form to set the quiz options:
    <dl>
      <dt><strong>Title</strong></dt>
      <dd>Quiz title. This will be displayed as the heading of the quiz.</dd>
      <dt><strong>Taxonomy selection</strong></dt>
      <dd>Any taxonomy vocabularies that are assigned to the quiz type will be displayed. Select from the terms displayed in order to assign the quiz to vocabulary terms.</dd>
      <dt><strong>Number of questions</strong></dt>
      <dd>Total number of questions on quiz.</dd>
      <dt><strong>Shuffle questions</strong></dt>
      <dd>Whether or not to shuffle (randomize) the questions.</dd>
      <dt><strong>Backwards Navigation</strong></dt>
      <dd>Whether or not to allow students to return to a previous question.</dd>
      <dt><strong>Feedback</strong></dt>
      <dd>Set options on when and whether question feedback should appear.</dd>
      <dt><strong>Number of takes</strong></dt>
      <dd>Number of takes to allow user. Varies from 1-9 or Unlimited times.</dd>
    </dl>
  </li>
  <li>Once the quiz has been created, click the <b>add questions</b> tab to assign questions to the quiz.</li>
  <li>Begin by selecting one or more terms from the taxonomy list and click <strong>Filter question list</strong>. This will bring up a selection of questions matching the selected vocabulary terms.</li>
  <li>Select a radio button next to each question indicating if the question should appear (Randomly, Always, or Never), and click <strong>Submit questions</strong>.</li>
  <li>Repeat process until satisfied with question selection.</li>
</ol>
    ', array('%admin-access' => url('admin/access'), '%admin-modules' => url('admin/modules'), '%admin-taxonomy' => url('admin/taxonomy'), '%create-content' => url('node/add'), '%multichoice' => url('node/add/multichoice'), '%create-quiz' => url('node/add/quiz')));
    case 'admin/modules#description':
      return t('Allows you to create interactive quizzes for your visitors.');
    case 'node/add#quiz':
      return t('Quizzes are a collection of questions designed to create interactive tests');
    default:
      break;
  }
}

/**
 * Retrieve list of question types
 *
 * Determined by which modules implement the list_questions() hook
 *
 * @return
 *   Array of question types
 */
function _quiz_get_question_types() {
  return module_implements('list_questions');
}

/**
 * Retrieve list of vocabularies for all quiz question types
 *
 * @return
 *   An array containing vocabulary list
 */
function _quiz_get_vocabularies() {
  $vocabularies = array();
  foreach (_quiz_get_question_types() as $type) {
    foreach (taxonomy_get_vocabularies($type) as $vid => $vocabulary) {
      $vocabularies[$vid] = $vocabulary;
    }
  }
  return $vocabularies;
}

/**
 * Prints a taxonomy selection form for each vocabulary
 *
 * @param $value
 *   Default selected value(s)
 * @return
 *   HTML output to print to screen
 */
function _quiz_taxonomy_select($value = 0) {
  $form = array();
  foreach (_quiz_get_vocabularies() as $vid => $vocabulary) {
    $form['taxonomy'][$vid] = taxonomy_form($vid, $value);
  }
  return $form;
}

/**
 * Retrieve list of questions assigned to quiz
 *
 * @return
 *   Array of questions
 */
function _quiz_get_questions() {
  $quiz = node_load(arg(1));
  $questions = array();
  if (!empty($quiz->nid)) {
    // Retrieve list of questions
    $result = db_query("
    SELECT n.nid, n.type, nr.body, nr.format, q.question_status
    FROM {node} n, {node_revisions} nr, {quiz_questions} q
    WHERE n.nid = q.question_nid
    AND n.nid = nr.nid
    AND q.quiz_nid = %d", $quiz->nid);

    // Create questions array
    while ($node = db_fetch_object($result)) {
      $questions[] = quiz_node_map($node);
    }
  }

  return $questions;
}


/**
 * Print a table containing array of questions and options
 *
 * @param $questions
 *   Array of question nodes
 * @return
 *   HTML to output table
 */
function quiz_print_question_table($questions) {
  $output = '';
  $status_descriptions = array(t('Random'), t('Always'), t('Never'));
  while(list($key, $question) = each($questions)) {
    $rows[] = array(
      $status_descriptions[$question->status],
      $question->question,
      $question->type);
  }
  $header = array(t('Status'), t('Question'), t('Type'));

  if (isset($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= 'No questions found.';
  }
  return $output;
}


/**
 * Handles "add question" tab
 *
 * Displays form which allows questions to be filtered by taxonomy vocabulary,
 * and assigned to the given quiz
 *
 * @return
 *  HTML output to create page
 */
function quiz_questions() {
  if ($_POST) {
    if ($_POST['op'] == 'Filter question list') {
      $_SESSION['quiz_filter'] = $_POST['edit'][1];
    }
    else if ($_POST['op'] =='Submit questions') {
      if (quiz_update_questions($_POST['edit']['question_status'])) {
        drupal_set_message("Question sucessfully updated");
      }
      else {
        drupal_set_message("There was a problem updating the questions...", 'error');
      }
    }
  }
  
  if (isset($_SESSION['quiz_filter'])) {
    $terms = $_SESSION['quiz_filter'];
  }
  else {
    $terms = array();
  }
  
  $quiz = node_load(arg(1));

  // Set page title
  drupal_set_title(check_plain($quiz->title));

  // Display filtering options
  if (_quiz_taxonomy_select() != array()) {
    $form['taxonomy_filter'] = array(
      '#type' => 'fieldset',
      '#title' => t('Select one or more terms to filter the question list'),
    );
    $form['taxonomy_filter']['taxonomy']['#tree'] = TRUE;

    $form['taxonomy_filter']['taxonomy'] = _quiz_taxonomy_select($terms);
    $form['taxonomy_filter']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Filter question list'),
    );
  }

  // Grab current question status, if any
  $questions = quiz_filter_question_list($terms);

  $result = db_query('SELECT question_nid, question_status FROM {quiz_questions} WHERE quiz_nid = %d', $quiz->nid);
  while ($assigned_question = db_fetch_object($result)) {
    if (array_key_exists($assigned_question->question_nid, $questions)) {
      $the_question =& $questions[$assigned_question->question_nid];
      $the_question->status = $assigned_question->question_status;
    }
  }
  

  // Display filtered question list
  $form['filtered_question_list'] = array(
    '#type' => 'fieldset',
    '#title' => t('The following questions were found'),
    '#theme' => 'filtered_questions',
  );

  $form['filtered_question_list']['question_status']['#tree'] = TRUE;

  while(list($key, $question) = each($questions)) {
    $form['filtered_question_list']['question_status'][$question->nid] = array(
      '#type' => 'radios',
      '#options' => array(QUESTION_RANDOM => '', QUESTION_ALWAYS => '', QUESTION_NEVER => ''),
      '#default_value' => $question->status,
    );
    $form['filtered_question_list']['question'][$question->nid] = array(
      '#type' => 'markup',
      '#value' => $question->question,
    );
    $form['filtered_question_list']['type'][$question->nid] = array(
      '#type' => 'markup',
      '#value' => $question->type,
    );
  }

  // Get questions assigned to this quiz
  $questions = _quiz_get_questions();

  // Display questions
  $form['assigned_questions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Questions assigned to this quiz'),
  );
  $form['assigned_questions']['questions'] = array(
    '#type' => 'markup',
    '#value' => quiz_print_question_table($questions),
  );

  // Display links to create other questions
  $form['additional_questions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Create additional questions'),
    '#theme' => 'additional_questions',
  );
  foreach (_quiz_get_question_types() as $type) {
    $form['additional_questions'][$type] = array(
      '#type' => 'markup',
      '#value' => l($type, "node/add/$type", array('title' => t("Go to $type administration"))) .' ',
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit questions'),
  );
  return drupal_get_form('quiz_questions', $form);
}

/**
 * Theme the filtered question list
 */
function theme_filtered_questions($form) {
  $header = array(t('Random'), t('Always'), t('Never'), t('Question'), t('Type'));
  $rows = array();

  while(list($nid, $values) = each($form['question_status'])) {
    if (is_numeric($nid)) {
      $rows[] = array(
        form_render($form['question_status'][$nid][0]),
        form_render($form['question_status'][$nid][1]),
        form_render($form['question_status'][$nid][2]),
        form_render($form['question'][$nid]),
        form_render($form['type'][$nid])
      );
    }
  }
  if (isset($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= t('No questions found.');
  }
  return $output;
}

function quiz_questions_execute($form_id, $values) {
  $quiz = node_load(arg(1));

  // Update quiz with selected question options
  $result = quiz_update_questions($values['question_status']);
  if ($result) {
    drupal_set_message(t('Questions updated successfully!'));
  }
  else {
    drupal_set_message(t('Either no questions were selected, or there was a problem updating your quiz. Please try again.'));
  }

  // Determine how many more questions are required
  $qnum = $quiz->number_of_questions;
  $anum = db_num_rows(db_query('SELECT question_nid FROM {quiz_questions} WHERE quiz_nid = %d', $quiz->nid));
  if ($anum < $qnum) {
    $diff = $qnum - $anum;
    drupal_set_message(t('Note that this quiz is set to show %qnum questions, while there are currently only %anum questions assigned. Please assign at least %diff more questions.', array('%qnum' => $qnum, '%anum' => $anum, '%diff' => $diff)), 'status');
  }
}

/**
 * Filters question list by given terms.
 *
 * @param $terms
 *   An array of vocabulary term IDs
 * @return
 *   Array of questions which match terms
 */
function quiz_filter_question_list($terms = NULL) {

  // Retrieve question list from database, filtered on vocabulary terms
  $sql = '
    SELECT DISTINCT n.nid, n.type, r.body, r.format
    FROM {node} n, {node_revisions} r ';
  if (count($terms) > 0) {
    $sql .= ', {term_node} t ';
  }
  $sql .= "WHERE n.nid = r.nid AND n.type IN ('". implode("','", _quiz_get_question_types()) ."') ";
  if (count($terms) > 0) {
    $sql .= 'AND t.tid IN ('. implode(',', $terms) .') AND t.nid = n.nid';
  }
  
  $result = db_query($sql);
  
  // Create questions array
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $questions[$node->nid] = quiz_node_map($node);
  }

  return $questions;
}

/**
 * Map node properties to a question object
 *
 * @param $node
 *   Node
 * @return
 *   Question object
 */
function quiz_node_map($node) {
  $new_question =& new stdClass();
  $new_question->question = check_markup($node->body, $node->format);
  $new_question->nid = $node->nid;
  $new_question->type = $node->type;
  $new_question->status = isset($node->question_status) ? $node->question_status : 2;
  return $new_question;
}

/**
 * Updates questions assigned to the quiz
 *
 * @param $questions
 *   Array of questions and their status
 * @return
 *   True if update was a success, false if three was a problem
 */
function quiz_update_questions($questions) {
  $quiz = node_load(arg(1));
  $return = true;

  if (!empty($questions)) {
    // Get currently assigned questions
    $result = db_query('SELECT quiz_nid, question_nid, question_status FROM {quiz_questions} WHERE quiz_nid = %d', $quiz->nid);
    $assigned_questions = array();
    while ($assigned_question = db_fetch_object($result)) {
      $assigned_questions[$assigned_question->question_nid] = $assigned_question->question_status;
    }

    // Perform update if question is already assigned, or insert if it's a new question
    while(list($key, $value) = each($questions)) {
      if ($value == QUESTION_NEVER) {
        $result = db_query('DELETE FROM {quiz_questions} WHERE quiz_nid = %d AND question_nid = %d', $quiz->nid, $key);
        if (!$result) {
          $return = false;
        }
      }
      else {
        if (array_key_exists($key, $assigned_questions)) {
          $result = db_query('UPDATE {quiz_questions} SET question_status = %d WHERE quiz_nid = %d AND question_nid = %d', $value, $quiz->nid, $key);
          if (!$result) {
            $return = false;
          }
        }
        else {
          $result = db_query('INSERT INTO {quiz_questions} (quiz_nid, question_nid, question_status) VALUES (%d, %d, %d)', $quiz->nid, $key, $value);
          if (!$result) {
            $return = false;
          }
        }
      }
    }

  }
  else {
    $return = false;
  }

  return $return;

}


/*
 * Quiz Admin
 */
function quiz_admin() {
  $results = _quiz_get_results();
  
  $form['quizresults'] = array(
    '#type' => 'fieldset',
    '#title' => t('Quiz Results'));
  $form['quizresults']['table'] = array(
    '#type' => 'markup',
    '#value' => quiz_admin_get_results_table($results));
  
  return system_settings_form('quiz_admin_settings', $form);
}


/*
 * Results Table
 */
function quiz_admin_get_results_table($results) {
  $output = '';
  $rows = array();

  while(list($key, $result) = each($results)) {
    $rows[] = array(
      l("view", "admin/quiz/".$result['rid']."/view") . " | " . l("delete", "admin/quiz/".$result['rid']."/delete"),
      $result['title'],
      $result['name'],
      $result['rid'],
      $result['time_start'],
      $result['finished'],);
  }
  
  $header = array(
    t('Action'),
    t('Quiz Title'),
    t('Username'),
    t('Result<br/>ID'),
    t('Time Started'),
    t('Finished?'));
  
  if (isset($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= 'No questions found.';
  }
  return $output;
}

/*
 * Get a full results list
 */
function _quiz_get_results() {
  $results = array();
  $dbresult = db_query("SELECT
                          n.nid nid,
                          n.title title,
                          u.name name,
                          qr.rid rid,
                          qr.time_start time_start,
                          if (qr.time_end, qr.time_end, 'In Progress&hellip;') finished
                        FROM {node} n, {quiz} q, {quiz_result} qr, {users} u
                        WHERE
                          n.type = 'quiz'
                            AND
                          n.nid = q.nid
                            AND
                          qr.quiz_nid = q.nid
                            AND
                          u.uid = qr.uid
                        ORDER BY qr.rid ASC");
  //Create results array
  while($line = db_fetch_array($dbresult)) {
    $results[$line['rid']] = $line;
  }
  return $results;
}



/*
 * Quiz Results Admin
 */
function quiz_admin_results() {
  $questions = _quiz_get_answers(arg(2));
  
  $output = '';
  $rows = array();

  while(list($key, $question) = each($questions)) {
    $question['qanswer'] = unserialize($question['qanswer']);
    $score = module_invoke($question['type'], 'calculate_result', $question['qanswer']['answers'], $question['qanswer']['tried']);
    
    #dprint_r($question);
    $rows[] = array(
      $question['question'],
      $score,
      );
  }
  
  $header = array(t('Question'), t('Right or Wrong?'),);
  
  if (isset($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= 'No answers found in this result!.';
  }
  return $output;
}

/*
 * Delete Result
 */
function quiz_admin_result_delete() {
  $form['del_rid'] = array('#type' => 'hidden', '#value' => arg(2));
  return confirm_form('quiz_admin_result_delete',
                      $form,
                      t('Are you sure you want to delete this quiz result?'),
                      'admin/quiz',
                      t('This action cannot be undone.'),
                      t('Delete'),
                      t('Cancel'));
}
function quiz_admin_result_delete_submit($form_id, $form_values) {

  db_query("DELETE FROM {quiz_result} WHERE rid = %d", $form_values['del_rid']);
  db_query("DELETE FROM {quiz_question_results} WHERE result_rid = %d", $form_values['del_rid']);
  drupal_set_message(t('Deleted result.'));

  return "admin/quiz";
}


function _quiz_get_answers($rid) {
  $results = array();
  $dbresult = db_query("SELECT
                          qqr.question_nid qnid,
                          qqr.answer qanswer,
                          nr.body question,
                          n.type type
                        FROM quiz_question_results qqr, quiz_question qq, node n, node_revisions nr
                        WHERE
                          qqr.result_rid = %d
                            AND
                          qqr.question_nid = qq.nid
                            AND
                          n.nid = qq.nid
                            AND
                          nr.nid = n.nid", $rid);
  //Create results array
  while($line = db_fetch_array($dbresult)) {
    $results[$line['qnid']] = $line;
  }
  return $results;
}


// edit: view: taken, feedback, insert into quiz_results, view quiz_results