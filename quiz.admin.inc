<?php

use Drupal\quiz\Form\QuizEntityForm;
use Drupal\quiz\Form\QuizTypeForm;

/**
 * Define quiz-type editing form.
 */
function quiz_type_form($form, &$form_state, $quiz_type, $op = 'edit') {
  $obj = new QuizTypeForm();
  return $obj->get($form, $form_state, $quiz_type, $op);
}

/**
 * Define quiz-entity editing form.
 */
function quiz_entity_form($form, &$form_state, $quiz, $op = 'edit') {
  $obj = new QuizEntityForm($quiz);
  return $obj->get($form, $form_state, $op);
}

// THEME FUNCTIONS

/**
 * Theme a question selection table, adding drag and drop support.
 */
function theme_question_selection_table($variables) {
  $form = $variables['form'];

  // Building headers
  $headers = array(t('Question'), t('Type'), t('Actions'), t('Update'), t('Max score'), t('Auto update max score'), t('Delete'));
  if (isset($form['compulsories'])) {
    $headers[] = t('Compulsory');
  }
  $headers[] = t('Weight');
  $headers[] = t('Parent ID');
  $headers[] = array('data' => t('ID'), 'class' => array('tabledrag-hide'));

  // Building table body
  $rows = array();
  if (!empty($form['titles'])) {
    foreach (element_children($form['titles']) as $id) {
      $form['weights'][$id]['#attributes']['class'] = array('question-list-weight');
      $form['qr_ids'][$id]['#attributes']['class'] = array('qnr-id');
      $form['qr_pids'][$id]['#attributes']['class'] = array('qnr-pid');
      $rows[] = _quiz_get_question_row($form, $id);
    }
    // Make sure the same fields aren't rendered twice
    unset($form['types'], $form['view_links'], $form['remove_links'], $form['stayers']);
    unset($form['max_scores'], $form['auto_update_max_scores'], $form['revision'], $form['weights'], $form['titles'], $form['compulsories'], $form['qr_ids'], $form['qr_pids']);
  }

  // We hide the table if no questions have been added so that jQuery can show
  // it the moment the first question is beeing added.
  $html_attr = array();
  if (isset($form['no_questions'])) {
    $html_attr['style'] = "display:none;";
  }

  drupal_add_tabledrag('question-list', 'match', 'parent', 'qnr-pid', 'qnr-pid', 'qnr-id', TRUE, 1);
  drupal_add_tabledrag('question-list', 'order', 'sibling', 'question-list-weight');

  return drupal_render($form['random_settings'])
    . theme('table', array(
        'header'     => $headers,
        'rows'       => $rows,
        'attributes' => array('id' => 'question-list') + $html_attr))
    . drupal_render_children($form);
}

/**
 * Helper function for theme_question_selection_table
 *
 * TODO: DELETE
 *
 * @see quiz_questions_form()
 * @see theme_question_selection_table()
 *
 * @param $sub_form
 *   Form definition array for a filtered questions list
 * @param $id
 *   Identifier used in $sub_form
 * @return table row
 *   Array defining a table row
 */
function _quiz_get_question_row($sub_form, $id) {
  $type = $sub_form['types'][$id]['#markup'];

  $action = theme('item_list', array(
      'items'      => array(
          drupal_render($sub_form['view_links'][$id]),
          '<SPAN CLASS="q-remove" STYLE="display:none">' . drupal_render($sub_form['remove_links'][$id]) . '</SPAN>',
      ),
      'attributes' => array(
          'class' => array('links', 'inline'),
      ),
  ));
  $qr_pid = $sub_form['qr_pids'][$id]['#default_value'];
  $data_array = array(
      // The checkbox and the title
      ($qr_pid ? theme('indentation', array('size' => 1)) : NULL) . drupal_render($sub_form['titles'][$id]),
      $type,
      $action,
      isset($sub_form['revision'][$id]) ? drupal_render($sub_form['revision'][$id]) : t("Up to date"),
      drupal_render($sub_form['max_scores'][$id]),
      drupal_render($sub_form['auto_update_max_scores'][$id]),
      drupal_render($sub_form['stayers'][$id]),
  );
  if (isset($sub_form['compulsories'])) {
    $data_array[] = drupal_render($sub_form['compulsories'][$id]);
  }
  $data_array[] = drupal_render($sub_form['weights'][$id]);
  $data_array[] = drupal_render($sub_form['qr_pids'][$id]);
  $data_array[] = array(
      'class' => array('tabledrag-hide'),
      'data'  => drupal_render($sub_form['qr_ids'][$id]),
  );

  $leaf_class = $sub_form['types'][$id]['#question_type'] != 'quiz_page' ? 'tabledrag-leaf' : '';

  return array(
      'class' => array('q-row', 'draggable', $leaf_class),
      'id'    => 'q-' . $id,
      'data'  => $data_array
  );
}

/**
 * Themes a categorized quiz form
 */
function theme_quiz_categorized_form($variables) {
  $form = $variables['form'];

  drupal_add_js(drupal_get_path('module', 'quiz') . '/js/quiz.admin.categorized-form.js');

  $rows = array();
  foreach ($form as $key => &$existing) {
    if (!is_numeric($key)) {
      continue;
    }
    $cols = array();
    $cols[] = drupal_render($existing['name']);
    $cols[] = drupal_render($existing['number']);
    $cols[] = drupal_render($existing['max_score']);
    $cols[] = drupal_render($existing['remove']);
    $cols[] = drupal_render($existing['weight']);
    $rows[] = array('data' => $cols, 'class' => array('draggable'));
  }

  $output = '';
  if (!empty($rows)) {
    $header = array(t('Category'), t('Number of questions'), t('Max score per question'), t('Remove'), t('Weight'));
    drupal_add_tabledrag('existing-terms', 'order', 'sibling', 'term-weight', NULL, NULL, TRUE);
    $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('id' => 'existing-terms')));
  }
  return $output . drupal_render_children($form);
}

/**
 * Limit the year options to the years 1970 - 2030 for form items of type date.
 * Some systems don't support all the dates the forms api lets you choose from.
 * This function limits the options to dates most systems support.
 */
function _quiz_after_build_fix_year_options() {
  return array(
      'year' => array(
          '#options' => drupal_map_assoc(range(1970, 2030))
      )
  );
}
