<?php

use Drupal\quiz\Entity\Result;
use Drupal\quiz_question\Entity\Question;

/**
 * Quiz Question module.
 * This module provides the basic facilities for adding quiz question types to a quiz.
 * @file
 */
/**
 * Include hook implementations.
 */
require_once dirname(__FILE__) . '/quiz_question.hooks.inc';
require_once dirname(__FILE__) . '/quiz_question.todo.php';

/**
 * Get controller for question entity.
 * 
 * @return \Drupal\quiz_question\Entity\QuestionController
 */
function quiz_question_controller() {
  return entity_get_controler('quiz_question');
}

/**
 * Get the information about various implementations of quiz questions.
 *
 * @param string $name
 *  Name of question type.
 * @param boolean $reset
 *  If this is true, the cache will be reset.
 * @return
 *  An array of information about quiz question implementations.
 * @see quiz_question_quiz_question_info() for an example of a quiz question info hook.
 */
function quiz_question_get_plugin_info($name = NULL, $reset = FALSE) {
  $info = &drupal_static(__FUNCTION__, array());

  if (empty($info) || $reset) {
    foreach (module_invoke_all('quiz_question_info') as $type => $definition) {
      if (!empty($definition['question provider'])) { # We only want the ones with classes.
        $info[$type] = $definition;
      }
    }
    drupal_alter('quiz_question_info', $info);
  }

  // Question provider must be instance of QuizQuestion class.
  foreach ($info as $plugin_name => $plugin_info) {
    if (!is_subclass_of($plugin_info['question provider'], 'Drupal\quiz_question\QuestionPlugin')) {
      $msg = t("The question-type %name isn't a QuizQuestion. It needs to extend the QuizQuestion class.", array('%name' => $plugin_name));
      drupal_set_message($msg, 'error', FALSE);
    }
  }

  return NULL !== $name ? $info[$name] : $info;
}

/**
 * Get module for a question type.
 *
 * @param string $question_type_name
 * @return string
 *   Name of module matching the question type, as given by quiz_question_info()
 *   hook.
 */
function quiz_question_module_for_type($question_type_name) {
  $question_type = quiz_question_type_load($question_type_name);
  $plugin_info = quiz_question_get_plugin_info($question_type->plugin);
  return $plugin_info['module'];
}

/**
 * Figure out if a user has access to score a certain result
 *
 * @param int $question_vid
 * @param int $result_id
 * @return bool
 *  True if the user has access to score the result
 */
function quiz_question_access_to_score($question_vid, $result_id) {
  global $user;

  if (!$answers = entity_load('quiz_result_answer', FALSE, array('result_id' => $result_id, 'question_vid' => $question_vid))) {
    return FALSE;
  }

  if (user_access('score any quiz')) {
    return TRUE;
  }

  if (user_access('score taken quiz answer')) {
    if ($result = quiz_result_load($result_id)) {
      if ($user->uid == $result->uid) {
        return TRUE;
      }
    }
  }

  if (user_access('score own quiz')) {
    if ($result = quiz_result_load($result_id)) {
      if ($quiz = quiz_load(NULL, $result->quiz_vid)) {
        return $user->uid == $quiz->uid;
      }
    }
  }
}

/**
 * Returns a result report for a question response.
 *
 * The retaurned value is a form array because in some contexts the scores in the form
 * is editable
 *
 * @param Question $question
 * @return array
 */
function quiz_question_report_form(Result $result, Question $question) {
  $answer = $question->answers[0];
  $handler = quiz_answer_controller()->getInstance($answer['result_id'], $question, $answer);

  // If need to specify the score weight if it isn't already specified.
  if (!isset($handler->question->score_weight)) {
    $qr_max_score = db_query('SELECT qnr.max_score
      FROM {quiz_relationship} qnr
      WHERE qnr.question_vid = :question_vid AND qnr.quiz_vid = :quiz_vid', array(
        ':question_vid' => $question->vid,
        ':quiz_vid'     => $result->quiz_vid
      ))->fetchField();

    if ($qr_max_score === FALSE) {
      $qr_max_score = db_query('SELECT qt.max_score
        FROM {quiz_results} qnr
         JOIN {quiz_results_answers} qnra ON (qnr.result_id = qnra.result_id)
         JOIN {quiz_terms} qt ON (qt.vid = qnr.quiz_vid AND qt.tid = qnra.tid)
         WHERE qnr.result_id = :rid AND qnra.question_nid = :qnid AND qnra.question_vid = :qvid', array(
          ':rid'  => $answer['result_id'],
          ':qnid' => $question->qid,
          ':qvid' => $question->vid
        ))->fetchField();
    }

    $handler->question->score_weight = 0;
    if (($qr_max_score != 0 && $handler->question->max_score != 0)) {
      $handler->question->score_weight = $qr_max_score / $handler->question->max_score;
    }
  }
  return $handler->getReportForm();
}

/**
 * Theme the feedback for any question type.
 */
function theme_quiz_question_feedback($variables) {
  $rows = $variables['data'];
  $headers = array_intersect_key($variables['labels'], $rows[0]);
  return theme('table', array('header' => $headers, 'rows' => $rows));
}
