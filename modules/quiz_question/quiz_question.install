<?php

use Drupal\quiz_question\Schema\Schema7060;

/**
 * @file
 * quiz_question.install
 *
 * The installer file for quiz_question.
 */

/**
 * Implements hook_schema().
 */
function quiz_question_schema() {
  require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
  $schema = new Schema7060();
  return $schema->get();
}

/**
 * Make the question body visible by default for the question view mode
 */
function quiz_question_update_7401() {
  foreach (array_keys(quiz_question_get_handler_info()) as $question_type) {
    $instance = field_read_instance('node', 'body', $question_type);

    $instance['display']['question'] = array(
        'label'    => 'hidden',
        'type'     => 'text_default',
        'weight'   => 1,
        'settings' => array(),
        'module'   => 'text',
    );

    field_update_instance($instance);
  }
}

/**
 * Add fields for general question feedback.
 */
function quiz_question_update_7500() {
  db_drop_primary_key('quiz_question_properties');
  db_add_field('quiz_question_properties', 'qqp_id', array('type' => 'serial'), array('primary key' => array('qqp_id')));
  db_add_field('quiz_question_properties', 'feedback', array('type' => 'text'));
  db_add_field('quiz_question_properties', 'feedback_format', array('type' => 'varchar', 'length' => 255, 'not null' => FALSE));

  if (module_exists('truefalse')) {
    // Migrate the truefalse feedback, since we have generic feedback now.
    $filter = filter_default_format();
    db_query("UPDATE {quiz_question_properties} qqp
    INNER JOIN {quiz_truefalse_node} qtn ON (qtn.vid = qqp.vid)
    SET qqp.feedback = qtn.feedback, qqp.feedback_format = :format", array(':format' => $filter));

    // Drop old field.
    db_drop_field('quiz_truefalse_node', 'feedback');
  }

  return t('Added global quiz question feedback fields and migrated true/false feedback.');
}

/**
 * Create new tables for question and question type entities.
 */
function quiz_question_update_7600() {
  if (!db_table_exists('quiz_question_type')) {
    require_once dirname(__FILE__) . '/src/Schema/Schema7060.php';
    $schema = new Schema7060();
    $tables = $schema->get();

    db_create_table('quiz_question_type', $tables['quiz_question_type']);
    db_create_table('quiz_question', $tables['quiz_question']);
    db_create_table('quiz_question_revision', $tables['quiz_question_revision']);

    // Flush cache to make sure the question entity types is defined
    drupal_flush_all_caches();

    // Create question bundles from question node types.
    return quiz_question_upgrade_question_type_from_node_type_to_entity();
  }
}

function quiz_question_upgrade_question_type_from_node_type_to_entity() {
  $handler_info = quiz_question_get_handler_info();

  $sql = 'SELECT * FROM {node_type} WHERE module = :module';
  $node_types = db_query($sql, array(':module' => 'quiz_question'))->fetchAll();

  $labels = array();
  foreach ($node_types as $node_type) {
    // question node type is already converted to question-type entity
    $sql = "SELECT 1 FROM {quiz_question_type} WHERE type = :type";
    if (db_query($sql, array(':type' => $node_type->type))->fetchColumn()) {
      continue;
    }

    // The module for the module is not available yet. The module will upgrade itself.
    $handler_name = $node_type->type;
    if (!isset($handler_info[$handler_name])) {
      continue;
    }

    if ($label = _quiz_question_convert_node_type_to_question_type_entity($node_type)) {
      $labels[] = $label;
    }
  }
  return 'Created new question types: ' . implode(', ', $labels);
}

function _quiz_question_convert_node_type_to_question_type_entity($node_type) {
  $question_type = entity_create('quiz_question_type', array(
      'type'        => $node_type->type,
      'label'       => $node_type->name,
      'description' => $node_type->description,
      'help'        => $node_type->help,
      'handler'     => $node_type->type,
      'data'        => array(
          'multilingual' => (int) variable_get('language_content_type_' . $node_type->type, 0)
      )
  ));
  $question_type->save();

  db_update('node_type')
    ->fields(array('module' => 'node', 'base' => 'node_content', 'disabled' => 0))
    ->condition('base', 'quiz_question')
    ->condition('type', $node_type->type)
    ->execute();

  return $node_type->type;
}

/**
 * Create temp columns for next update scripts.
 */
function quiz_question_update_7601() {
  db_add_field('quiz_question', 'node_nid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_add_field('quiz_question_revision', 'node_vid', array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE, 'default' => 0));
  db_add_index('quiz_question', 'question_node', array('node_nid'));
  db_add_index('quiz_question_revision', 'question_node', array('node_vid'));

  foreach (module_implements('quiz_question_info') as $module) {
    require_once drupal_get_path('module', $module) . "/{$module}.install";
    module_invoke($module, 'quiz_question_upgrade_schema_node_to_entity');
  }
}

/**
 * @TODO: Migrate question nodes to question entities.
 */
function quiz_question_update_7602() {
  foreach (array_keys(quiz_question_get_handler_info()) as $handler_name) {
    $select = db_select('node_revision', 'r');
    $select->innerJoin('node', 'n', 'r.nid = n.nid');
    $rows = $select
      ->fields('r', array('nid', 'vid', 'uid', 'title', 'log', 'timestamp', 'status'))
      ->fields('n', array('type', 'language', 'created', 'changed'))
      ->condition('n.type', $handler_name)
      ->orderBy('r.vid')
      ->execute()
      ->fetchAll();
    foreach ($rows as $row) {
      _quiz_question_update_7605($row);
    }
  }
}

function _quiz_question_update_7605($row) {
  // find quiz revision
  $sql = 'SELECT qid FROM {quiz_entity} WHERE node_nid = :nid';
  if ($question_id = db_query($sql, array(':nid' => $row->nid))->fetchColumn()) {
    $question = quiz_question_entity_load($question_id);
  }
  else {
    $question = entity_create('quiz_question', array(
        'type'     => $row->type,
        'language' => $row->language,
        'status'   => $row->status,
        'title'    => $row->title,
        'created'  => $row->created,
        'changed'  => $row->timestamp,
        'uid'      => $row->uid,
        'node_nid' => $row->nid,
        'node_vid' => $row->vid,
    ));
  }

  $question->is_new_revision = 1;
  $question->log = $row->log;
  $question->skip_invoke_handler = TRUE;
  $question->save();
}

/**
 * @TODO: Other steps
 */
//function quiz_question_update_7609() {
//  return '…';
//}

/**
 * Clean up migration's temp data.
 */
function quiz_question_update_7610() {
  #db_drop_index('quiz_question', 'question_node');
  #db_drop_index('quiz_question_revision', 'question_node');
  #db_drop_field('quiz_question', 'node_nid');
  #db_drop_field('quiz_question_revision', 'node_vid');
  #return 'Cleaned up migration\'s temp columns.';
}

/**
 * Drop {quiz_question_properties} table.
 */
function quiz_question_update_7611() {
  db_drop_table('quiz_question_properties');
  return 'Dropped {quiz_question_properties} table.';
}

/**
 * Rename {quiz_question_type}.plugin to *.handler
 */
function quiz_question_update_7612() {
  if (db_field_exists('quiz_question_type', 'plugin')) {
    $spec = array('type' => 'varchar', 'length' => 32, 'not null' => TRUE, 'description' => 'Question handler type (shortanswer, longanswer, truefalse, …)');
    db_change_field('quiz_question_type', 'plugin', 'handler', $spec);
  }
}
