<?php
// $Id$

/**
 * @file
 * Multiple choice question type for quiz module
 *
 * Allows the creation of multiple choice questions (ex: a, b, c, d or true/false)
 */

/**
 * Implementation of hook_perm().
 */
function multichoice_perm() {
  return array('administer multichoice');
}

/**
 * Implementation of hook_access().
 */
function multichoice_access($op, $node) {
  if ($op == 'create') {
    return user_access('administer multichoice');
  }
}

/**
 * Implementation of hook_node().
 */
function multichoice_node_info() {
  return array('multichoice' => array('name' => t('multichoice'), 'base' => 'multichoice'));
}

/**
 * Implementation of hook_menu().
 */
function multichoice_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/multichoice', 'title' => t('multichoice'),
      'access' => user_access('administer multichoice'));
  }
  return $items;
}

/**
 * Implementation of hook_form().
 */
function multichoice_form(&$node) {
  $output = '';

  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form('multichoice', $node));
  }

  $output .= form_textarea(t('Question'), 'body', $node->body, 60, 5, '', NULL, TRUE);
  $output .= filter_form('format', $node->format);
  $output .= form_checkbox(t('Multiple answers'), 'multiple_answers', 1, $node->multiple_answers);
  $rows = array();
  $answers = $node->answers;
  for ($i = 0; $i < $node->rows; $i++) {
    $rows[] = array(
      form_checkbox('', 'answers]['. $i .'][0', 1, $answers[$i][0]),
      form_textarea('', 'answers]['. $i .'][1', $answers[$i][1], 20, 5),
      form_textarea('', 'answers]['. $i .'][2', $answers[$i][2], 20, 5));
  }
  $header = array(
    array('data' => t('Correct')),
    array('data' => t('Answer'), 'style' => 'width:250px;'),
    array('data' => t('Feedback'), 'style' => 'width:250px;'));
  $output .= theme('table', $header, $rows);
  $output .= form_checkbox(t('I need more answers'), 'more');

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function multichoice_validate(&$node) {

  // Hard-code questions to have no teaser and to not be promoted to front page
  $node->teaser = 0;
  $node->promote = 0;

  if (!$node->rows) {
     $node->rows = $node->answers ? count($node->answers) : 5;
  }
  if ($node->more) {
    $node->rows += 5;
  }
  if (!$node->nid && empty($_POST)) return;
  if (!$node->body) {
    form_set_error('body', t('multichoice is empty'));
  }
  $corrects = 0;
  foreach ($node->answers as $key => $answer) {
    if ($answer[0]) {
      if ($corrects && !$node->multiple_answers) {
        form_set_error('multiple_answers', t('Single choice yet multiple correct answers are present'));
      }
      $corrects++;
    }
    if (empty($answer[0]) && empty($answer[1]) && empty($answer[2])) {
      unset($node->answers[$key]);
    }
  }
  /* nincs valasz, de van mas illetve correctnek van jelolve de nincs valasz */
  if (!$corrects) { // untested
    form_set_error('answers][0][0', t('No correct choice(s)'));
  }
  if (!count($node->answers)) { // untested
    form_set_error('answers][0][0', t('No answers.'));
  }
}

/**
 * Implementation of hook_insert().
 */
function multichoice_insert($node) {
  db_query("INSERT INTO {multichoice} (nid, multiple_answers, answers) VALUES (%d, %d, '%s')", $node->nid, $node->multiple_answers, serialize($node->answers));
}

/**
 * Implementation of hook_update().
 */
function multichoice_update($node) {
  db_query("UPDATE {multichoice} SET multiple_answers = %d, answers = '%s' WHERE nid = %d", $node->multiple_answers, serialize($node->answers), $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function multichoice_delete($node) {
  db_query("DELETE FROM {multichoice} WHERE nid=%d", $node->nid);
  db_query("DELETE FROM {quiz_question} WHERE question_nid=%d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function multichoice_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {multichoice} WHERE nid = %d', $node->nid));
  $additions->answers = unserialize($additions->answers);
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function multichoice_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (user_access('administer multichoice')) {
    if (!$teaser) {
      $question = multichoice_render_question($node);
      $node->body = form($question);
    }
  }
  else if ($teaser) {
    $node->teaser = t('This is a quiz question, not to be viewed independently.');
    $node->body = $node->teaser; // we do not need Read more...
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implementation of hook_help().
 */
function multichoice_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Multiple choice question type for quiz module.');
    case 'node/add#multichoice':
      return t('A question type for the quiz module: allows you to create multiple choice questions (ex: A, B, C, D or true/false)');
  }
}

/**
 * Print question to screen
 *
 * @param $node
 *   Question node
 *
 * @return
 *   HTML output
 */
function multichoice_render_question($node) {
  $rows = array();

  // Radio buttons for single selection questions, checkboxes for multiselect
  if ($node->multiple_answers == 0) {
    foreach ($node->answers as $key => $answer) {
      $rows[] = array(form_radio('', 'tries', $key), $answer[1]);
    }
  } else {
    foreach ($node->answers as $key => $answer) {
      $rows[] = array(form_checkbox('', 'tries]['. $key, 1), $answer[1]);
    }
  }
  
  $header = header('', '');
  $form = theme('table', $header, $rows);
  return $node->body . $form;
}

/**
 * Evaluate whether question is correct
 *
 * @param $node
 *   Question
 *
 * @return
 *   TRUE if question is correct, FALSE if question is incorrect
 */
function multichoice_evaluate_question($node) {
  $points = 0;
  if (isset($_POST['edit']['tries'])) {
    if (is_array($_POST['edit']['tries'])) {
      // Multi-answer question
      foreach ($_POST['edit']['tries'] as $key => $try) {
        $points += ($try == $node->answers[$key][0]);
      }
      $points = ($points == count($node->answers));
    }
    else {
      // Single-answer question
      $count = 0;
      foreach ($node->answers as $key => $value) {
        if ($value[0] == 1) {
          $points += ($_POST['edit']['tries'] == $key);
        }
        $count++;
      }
    }
  }
  
  return $points;
}

/**
 * List all multiple choice questions
 *
 * @return
 *   Array of questions
 */
function multichoice_list_questions() {
  $result = db_query("SELECT nid, body, format FROM {node} WHERE type='%s'", 'multichoice');
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $questions[] = $question;
  }
  return $questions;
}