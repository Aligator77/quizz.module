<?php
// $Id$

/**
 * @file
 * Multiple choice question type for quiz module
 *
 * Allows the creation of multiple choice questions (ex: a, b, c, d or true/false)
 */

/**
 * Implementation of hook_perm().
 */
function multichoice_perm() {
  return array('create multichoice', 'edit own multichoice');
}

/**
 * Implementation of hook_access().
 */
function multichoice_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create multichoice');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own multichoice') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_node_info().
 */
function multichoice_node_info() {
  return array('multichoice' => array('name' => t('multichoice'), 'base' => 'multichoice'));
}

/**
 * Implementation of hook_menu().
 */
function multichoice_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array('path' => 'node/add/multichoice', 'title' => t('multichoice'),
      'access' => user_access('create multichoice'));
  }
  return $items;
}

/**
 * Implementation of hook_form().
 */
function multichoice_form(&$node) {

  // Display multichoice form
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $node->title,
    '#required' => TRUE,
  );

  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => t('Question'),
    '#default_value' => $node->body,
    '#required' => TRUE,
  );
  $form = array_merge($form, filter_form($node->format));

  $form['multiple_answers'] = array(
    '#type' => 'checkbox',
    '#title' => t('Multiple answers'),
    '#default_value' => $node->multiple_answers,
  );

  // Determine number of answer rows to display
  if (!isset($node->rows)) {
     $node->rows = max(2, $node->answers ? count($node->answers) : 5);
  }
  if ($_POST['edit']['more']) {
    $node->rows += 5;
  }
  $answers = $node->answers;

  // Display answer rows
  $form['answers'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choices'),
    '#tree' => TRUE,
    '#theme' => 'multichoice_form'
  );
  for ($i = 0; $i < $node->rows; $i++) {
    $form['answers'][$i]['correct'] = array(
      '#type' => 'checkbox',
      '#default_value' => $answers[$i]['correct'],
    );
    $form['answers'][$i]['answer'] = array(
      '#type' => 'textarea',
      '#default_value' => $answers[$i]['answer'],
      '#cols' => 20,
    );
    $form['answers'][$i]['feedback'] = array(
      '#type' => 'textarea',
      '#default_value' => $answers[$i]['feedback'],
      '#cols' => 20,
    );
  }

  $form['more'] = array(
    '#type' => 'checkbox',
    '#title' => t('I need more answers'),
  );

  return $form;
}

/**
 * Theme function for multichoice form
 *
 * Lays out answer field elements into a table
 *
 * @return string
 *   HTML output
 */
function theme_multichoice_form($form) {

  // Format table header
  $header = array(
    array('data' => t('Correct')),
    array('data' => t('Answer'), 'style' => 'width:250px;'),
    array('data' => t('Feedback'), 'style' => 'width:250px;')
  );

  // Format table rows
  $rows = array();
  foreach (element_children($form) as $key) {
    $rows[] = array(
      form_render($form[$key]['correct']),
      form_render($form[$key]['answer']),
      form_render($form[$key]['feedback']),
    );
  }

  // Theme output and display to screen
  $output = theme('table', $header, $rows);

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function multichoice_validate(&$node) {

  // Hard-code questions to have no teaser and to not be promoted to front page
  $node->teaser = 0;
  $node->promote = 0;

  if (!$node->nid && empty($_POST)) return;

  // Validate title and body
  node_validate_title($node);
  if (!$node->body) {
    form_set_error('body', t('Question text is empty'));
  }

  // Validate answers
  $answers = array();
  $corrects = 0;
  foreach ($node->answers as $key => $answer) {
    if ($answer['correct']) {
      if ($corrects && !$node->multiple_answers) {
        form_set_error('multiple_answers', t('Single choice yet multiple correct answers are present'));
      }
      $corrects++;
    }
    if ($answer['answer']) {
      $answers[] = $answer['answer'];
    }
  }

  if (!$corrects) {
    form_set_error("answers][0]['correct'", t('No correct choice(s)'));
  }
  if (!count($answers)) {
    form_set_error("answers][0]['answer'", t('No answers.'));
  }
  if (count($answers) < 2) {
    form_set_error("answers][0]['answer'", t('Must have at least two answers'));
  }
}

/**
 * Implementation of hook_insert().
 */
function multichoice_insert($node) {
  db_query("INSERT INTO {multichoice} (nid, multiple_answers, answers) VALUES (%d, %d, '%s')", $node->nid, $node->multiple_answers, serialize($node->answers));
}

/**
 * Implementation of hook_update().
 */
function multichoice_update($node) {
  db_query("UPDATE {multichoice} SET multiple_answers = %d, answers = '%s' WHERE nid = %d", $node->multiple_answers, serialize($node->answers), $node->nid);
}

/**
 * Implementation of hook_delete().
 */
function multichoice_delete($node) {
  db_query("DELETE FROM {multichoice} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {quiz_question} WHERE question_nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function multichoice_load($node) {
  $additions = db_fetch_object(db_query('SELECT * FROM {multichoice} WHERE nid = %d', $node->nid));
  $additions->answers = unserialize($additions->answers);
  return $additions;
}

/**
 * Implementation of hook_view().
 */
function multichoice_view(&$node, $teaser = FALSE, $page = FALSE) {
  if (user_access('create multichoice')) {
    if (!$teaser) {
      $question = multichoice_render_question($node);
      $node->body .= $question;
    }
  }
  else if ($teaser) {
    $node->teaser = t('This is a quiz question, not to be viewed independently.');
    $node->body = $node->teaser; // we do not need Read more...
  }
  else {
    drupal_access_denied();
  }
}

/**
 * Implementation of hook_help().
 */
function multichoice_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Multiple choice question type for quiz module.');
    case 'node/add#multichoice':
      return t('A question type for the quiz module: allows you to create multiple choice questions (ex: A, B, C, D or true/false)');
  }
}

/**
 * Print question to screen
 *
 * @param $node
 *   Question node
 *
 * @return
 *   HTML output
 */
function multichoice_render_question($node) {

  // Radio buttons for single selection questions, checkboxes for multiselect
  if ($node->multiple_answers == 0) {
    $type = 'radios';
  } else {
    $type = 'checkboxes';
  }

  // Get options
  $options = array();
  foreach ($node->answers as $key => $answer) {
    if (empty($answer['correct']) && empty($answer['answer']) && empty($answer['feedback'])) {
      unset($node->answers[$key]);
    } else {
      $options[$key] = $answer['answer'];
    }
  }

  // Create form 
  $form['tries'] = array(
    '#type' => $type,
    '#options' => $options,
    '#default_value' => NULL,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return drupal_get_form('multichoice_render_question', $form);
}

/**
 * Evaluate whether question is correct
 *
 * @param $nid
 *   Question Node ID
 *
 * @return
 *   Array of results, in the form of:
 *   array(
 *     'input' => array of answer(s) chosen by user
 *     'feedback' => array of feedback for selected answer(s)
 *     'score' => 0 or 1, depending on whether question was answered properly
 *   );
 */
function multichoice_evaluate_question($nid) {
  $question = node_load($nid);
  $results = array();
  $points = 0;

  if (isset($_POST['edit']['tries'])) {
    if (is_array($_POST['edit']['tries'])) {

      // Multi-answer question
      foreach ($_POST['edit']['tries'] as $key => $try) {
        if ($try == 1) {

          $results['input'][] = $key;
          
          $results['feedback'][] = $question->answers[$key]['feedback'];
        }        
        $points += ($try == $question->answers[$key]['correct']);
      }
      $results['score'] = ($points == count($question->answers));
    }
    else {

      // Single-answer question
      $count = 0;
      $input = $_POST['edit']['tries'];
 
      $results['input'][] = $input;
      $results['feedback'][] = $question->answers[$input]['feedback'];
      foreach ($question->answers as $key => $value) {
        if ($value[0] == 1) {
          $points = $input == $key ? 1 : 0;
        }
        $count++;
      }
      $results['score'] = $points;
    }
  }

  return $results;
}

/**
 * List all multiple choice questions
 *
 * @return
 *   Array of questions
 */
function multichoice_list_questions() {
  $result = db_query("SELECT nid, body, format FROM {node} WHERE type= '%s'", 'multichoice');
  $questions = array();
  while ($node = db_fetch_object($result)) {
    $question =& new stdClass();
    $question->question = check_markup($node->body, $node->format);
    $question->nid = $node->nid;
    $questions[] = $question;
  }
  return $questions;
}